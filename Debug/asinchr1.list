
asinchr1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a4  080075a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075ac  080075ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080075b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000007c  08007630  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08007630  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016169  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031f1  00000000  00000000  00036215  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001040  00000000  00000000  00039408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000217c5  00000000  00000000  0003a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000fad2  00000000  00000000  0005bc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d04db  00000000  00000000  0006b6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0013bbba  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e90  00000000  00000000  0013bc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004310  00000000  00000000  0013cac8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d68 	.word	0x08006d68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08006d68 	.word	0x08006d68

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b092      	sub	sp, #72	; 0x48
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000d16:	e0ce      	b.n	8000eb6 <arm_cmplx_mag_f32+0x1b2>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	1d1a      	adds	r2, r3, #4
 8000d1c:	60fa      	str	r2, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1d1a      	adds	r2, r3, #4
 8000d26:	60fa      	str	r2, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000d2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d38:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1d1a      	adds	r2, r3, #4
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	edc7 7a08 	vstr	s15, [r7, #32]
 8000d52:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000d54:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d60:	db09      	blt.n	8000d76 <arm_cmplx_mag_f32+0x72>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000d62:	ed97 0a08 	vldr	s0, [r7, #32]
 8000d66:	f005 ffa9 	bl	8006cbc <sqrtf>
 8000d6a:	eef0 7a40 	vmov.f32	s15, s0
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	edc3 7a00 	vstr	s15, [r3]
 8000d74:	e003      	b.n	8000d7e <arm_cmplx_mag_f32+0x7a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1d1a      	adds	r2, r3, #4
 8000d82:	60fa      	str	r2, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1d1a      	adds	r2, r3, #4
 8000d8c:	60fa      	str	r2, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000d92:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d96:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000da2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1d1a      	adds	r2, r3, #4
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 8000dba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc6:	db09      	blt.n	8000ddc <arm_cmplx_mag_f32+0xd8>
      *pOut = __builtin_sqrtf(in);
 8000dc8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000dcc:	f005 ff76 	bl	8006cbc <sqrtf>
 8000dd0:	eef0 7a40 	vmov.f32	s15, s0
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	edc3 7a00 	vstr	s15, [r3]
 8000dda:	e003      	b.n	8000de4 <arm_cmplx_mag_f32+0xe0>
      *pOut = 0.0f;
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	1d1a      	adds	r2, r3, #4
 8000de8:	60fa      	str	r2, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1d1a      	adds	r2, r3, #4
 8000df2:	60fa      	str	r2, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000df8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000dfc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e04:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000e08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1d1a      	adds	r2, r3, #4
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 8000e20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	db09      	blt.n	8000e42 <arm_cmplx_mag_f32+0x13e>
      *pOut = __builtin_sqrtf(in);
 8000e2e:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8000e32:	f005 ff43 	bl	8006cbc <sqrtf>
 8000e36:	eef0 7a40 	vmov.f32	s15, s0
 8000e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3c:	edc3 7a00 	vstr	s15, [r3]
 8000e40:	e003      	b.n	8000e4a <arm_cmplx_mag_f32+0x146>
      *pOut = 0.0f;
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	1d1a      	adds	r2, r3, #4
 8000e4e:	60fa      	str	r2, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1d1a      	adds	r2, r3, #4
 8000e58:	60fa      	str	r2, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000e5e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000e62:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000e6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1d1a      	adds	r2, r3, #4
 8000e7e:	60ba      	str	r2, [r7, #8]
 8000e80:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 8000e86:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e92:	db09      	blt.n	8000ea8 <arm_cmplx_mag_f32+0x1a4>
      *pOut = __builtin_sqrtf(in);
 8000e94:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000e98:	f005 ff10 	bl	8006cbc <sqrtf>
 8000e9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	edc3 7a00 	vstr	s15, [r3]
 8000ea6:	e003      	b.n	8000eb0 <arm_cmplx_mag_f32+0x1ac>
      *pOut = 0.0f;
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]


    /* Decrement the loop counter */
    blkCnt--;
 8000eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f47f af2d 	bne.w	8000d18 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 8000ec6:	e035      	b.n	8000f34 <arm_cmplx_mag_f32+0x230>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	1d1a      	adds	r2, r3, #4
 8000ecc:	60fa      	str	r2, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1d1a      	adds	r2, r3, #4
 8000ed6:	60fa      	str	r2, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000edc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ee0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000eec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1d1a      	adds	r2, r3, #4
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	edc7 7a06 	vstr	s15, [r7, #24]
 8000f02:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8000f04:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	db09      	blt.n	8000f26 <arm_cmplx_mag_f32+0x222>
      *pOut = __builtin_sqrtf(in);
 8000f12:	ed97 0a06 	vldr	s0, [r7, #24]
 8000f16:	f005 fed1 	bl	8006cbc <sqrtf>
 8000f1a:	eef0 7a40 	vmov.f32	s15, s0
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	edc3 7a00 	vstr	s15, [r3]
 8000f24:	e003      	b.n	8000f2e <arm_cmplx_mag_f32+0x22a>
      *pOut = 0.0f;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8000f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f30:	3b01      	subs	r3, #1
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8000f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1c6      	bne.n	8000ec8 <arm_cmplx_mag_f32+0x1c4>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 8000f3a:	bf00      	nop
 8000f3c:	3748      	adds	r7, #72	; 0x48
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f52:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001030 <arm_cos_f32+0xec>
 8000f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f62:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000f66:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f6e:	ee17 3a90 	vmov	r3, s15
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000f74:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d502      	bpl.n	8000f88 <arm_cos_f32+0x44>
  {
    n--;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3b01      	subs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f92:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8000f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fa2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001034 <arm_cos_f32+0xf0>
 8000fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000faa:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8000fae:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb6:	ee17 3a90 	vmov	r3, s15
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fc0:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000fc2:	8b7b      	ldrh	r3, [r7, #26]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd4:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8000fd8:	8b7b      	ldrh	r3, [r7, #26]
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <arm_cos_f32+0xf4>)
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000fe4:	8b7b      	ldrh	r3, [r7, #26]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <arm_cos_f32+0xf4>)
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8000ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ffa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ffe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001006:	edd7 6a05 	vldr	s13, [r7, #20]
 800100a:	edd7 7a03 	vldr	s15, [r7, #12]
 800100e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001016:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	ee07 3a90 	vmov	s15, r3
}
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	372c      	adds	r7, #44	; 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	3e22f983 	.word	0x3e22f983
 8001034:	44000000 	.word	0x44000000
 8001038:	08006d80 	.word	0x08006d80

0800103c <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800103c:	b480      	push	{r7}
 800103e:	b08b      	sub	sp, #44	; 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8001046:	edd7 7a01 	vldr	s15, [r7, #4]
 800104a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d50a      	bpl.n	800106a <arm_sin_f32+0x2e>
 8001054:	edd7 7a01 	vldr	s15, [r7, #4]
 8001058:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001144 <arm_sin_f32+0x108>
 800105c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	db01      	blt.n	800106a <arm_sin_f32+0x2e>
     return x;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	e062      	b.n	8001130 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800106a:	edd7 7a01 	vldr	s15, [r7, #4]
 800106e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001148 <arm_sin_f32+0x10c>
 8001072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001076:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800107a:	edd7 7a08 	vldr	s15, [r7, #32]
 800107e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001082:	ee17 3a90 	vmov	r3, s15
 8001086:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8001088:	edd7 7a01 	vldr	s15, [r7, #4]
 800108c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	d502      	bpl.n	800109c <arm_sin_f32+0x60>
  {
    n--;
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	3b01      	subs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80010aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ae:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 80010b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800114c <arm_sin_f32+0x110>
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 80010c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ca:	ee17 3a90 	vmov	r3, s15
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010d4:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80010d6:	8b7b      	ldrh	r3, [r7, #26]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e8:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80010ec:	8b7b      	ldrh	r3, [r7, #26]
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <arm_sin_f32+0x114>)
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80010f8:	8b7b      	ldrh	r3, [r7, #26]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <arm_sin_f32+0x114>)
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 8001106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800110a:	edd7 7a05 	vldr	s15, [r7, #20]
 800110e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111a:	edd7 6a05 	vldr	s13, [r7, #20]
 800111e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112a:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	372c      	adds	r7, #44	; 0x2c
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	b44c02cd 	.word	0xb44c02cd
 8001148:	3e22f983 	.word	0x3e22f983
 800114c:	44000000 	.word	0x44000000
 8001150:	08006d80 	.word	0x08006d80

08001154 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_ADC1_Init+0xcc>)
 8001174:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <MX_ADC1_Init+0xd0>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_ADC1_Init+0xcc>)
 800117a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800117e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <MX_ADC1_Init+0xcc>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_ADC1_Init+0xcc>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_ADC1_Init+0xcc>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <MX_ADC1_Init+0xcc>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <MX_ADC1_Init+0xcc>)
 800119c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <MX_ADC1_Init+0xcc>)
 80011a4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MX_ADC1_Init+0xcc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_ADC1_Init+0xcc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_ADC1_Init+0xcc>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_ADC1_Init+0xcc>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_ADC1_Init+0xcc>)
 80011c6:	f002 f8a5 	bl	8003314 <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80011d0:	f000 fcea 	bl	8001ba8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80011d4:	2316      	movs	r3, #22
 80011d6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 80011d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011dc:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_ADC1_Init+0xcc>)
 80011ea:	f002 fbd1 	bl	8003990 <HAL_ADCEx_MultiModeConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80011f4:	f000 fcd8 	bl	8001ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_ADC1_Init+0xcc>)
 800120a:	f002 f8e5 	bl	80033d8 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001214:	f000 fcc8 	bl	8001ba8 <Error_Handler>
  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200000f4 	.word	0x200000f4
 8001224:	40012000 	.word	0x40012000

08001228 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_ADC2_Init+0x8c>)
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <MX_ADC2_Init+0x90>)
 800123e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_ADC2_Init+0x8c>)
 8001242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001246:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_ADC2_Init+0x8c>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_ADC2_Init+0x8c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_ADC2_Init+0x8c>)
 8001256:	2200      	movs	r2, #0
 8001258:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_ADC2_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_ADC2_Init+0x8c>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_ADC2_Init+0x8c>)
 800126a:	2201      	movs	r2, #1
 800126c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_ADC2_Init+0x8c>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_ADC2_Init+0x8c>)
 8001278:	2201      	movs	r2, #1
 800127a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_ADC2_Init+0x8c>)
 800127e:	f002 f849 	bl	8003314 <HAL_ADC_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001288:	f000 fc8e 	bl	8001ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800128c:	230b      	movs	r3, #11
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_ADC2_Init+0x8c>)
 800129e:	f002 f89b 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80012a8:	f000 fc7e 	bl	8001ba8 <Error_Handler>
  }

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000ac 	.word	0x200000ac
 80012b8:	40012100 	.word	0x40012100

080012bc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012d0:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MX_ADC3_Init+0x90>)
 80012d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_ADC3_Init+0x8c>)
 80012fe:	2201      	movs	r2, #1
 8001300:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_ADC3_Init+0x8c>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_ADC3_Init+0x8c>)
 800130c:	2201      	movs	r2, #1
 800130e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_ADC3_Init+0x8c>)
 8001312:	f001 ffff 	bl	8003314 <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 800131c:	f000 fc44 	bl	8001ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001320:	230c      	movs	r3, #12
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_ADC3_Init+0x8c>)
 8001332:	f002 f851 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800133c:	f000 fc34 	bl	8001ba8 <Error_Handler>
  }

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000013c 	.word	0x2000013c
 800134c:	40012200 	.word	0x40012200

08001350 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a5d      	ldr	r2, [pc, #372]	; (80014e4 <HAL_ADC_MspInit+0x194>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d158      	bne.n	8001424 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a5b      	ldr	r2, [pc, #364]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b59      	ldr	r3, [pc, #356]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = IU_Pin|ID_Pin;
 80013aa:	230a      	movs	r3, #10
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	484b      	ldr	r0, [pc, #300]	; (80014ec <HAL_ADC_MspInit+0x19c>)
 80013be:	f003 f94f 	bl	8004660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013c4:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_ADC_MspInit+0x1a4>)
 80013c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001400:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001406:	483a      	ldr	r0, [pc, #232]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 8001408:	f002 fdbc 	bl	8003f84 <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001412:	f000 fbc9 	bl	8001ba8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 800141a:	639a      	str	r2, [r3, #56]	; 0x38
 800141c:	4a34      	ldr	r2, [pc, #208]	; (80014f0 <HAL_ADC_MspInit+0x1a0>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001422:	e05a      	b.n	80014da <HAL_ADC_MspInit+0x18a>
  else if(adcHandle->Instance==ADC2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <HAL_ADC_MspInit+0x1a8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d128      	bne.n	8001480 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IV_Pin;
 8001466:	2302      	movs	r3, #2
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IV_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4820      	ldr	r0, [pc, #128]	; (80014fc <HAL_ADC_MspInit+0x1ac>)
 800147a:	f003 f8f1 	bl	8004660 <HAL_GPIO_Init>
}
 800147e:	e02c      	b.n	80014da <HAL_ADC_MspInit+0x18a>
  else if(adcHandle->Instance==ADC3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_ADC_MspInit+0x1b0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d127      	bne.n	80014da <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 8001494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_ADC_MspInit+0x198>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IW_Pin;
 80014c2:	2304      	movs	r3, #4
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IW_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <HAL_ADC_MspInit+0x1ac>)
 80014d6:	f003 f8c3 	bl	8004660 <HAL_GPIO_Init>
}
 80014da:	bf00      	nop
 80014dc:	3738      	adds	r7, #56	; 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40012000 	.word	0x40012000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	20000184 	.word	0x20000184
 80014f4:	40026410 	.word	0x40026410
 80014f8:	40012100 	.word	0x40012100
 80014fc:	40020800 	.word	0x40020800
 8001500:	40012200 	.word	0x40012200

08001504 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_DAC_Init+0x60>)
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <MX_DAC_Init+0x64>)
 8001516:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <MX_DAC_Init+0x60>)
 800151a:	f002 fc38 	bl	8003d8e <HAL_DAC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001524:	f000 fb40 	bl	8001ba8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <MX_DAC_Init+0x60>)
 8001538:	f002 fcb1 	bl	8003e9e <HAL_DAC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001542:	f000 fb31 	bl	8001ba8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	2210      	movs	r2, #16
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_DAC_Init+0x60>)
 800154e:	f002 fca6 	bl	8003e9e <HAL_DAC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001558:	f000 fb26 	bl	8001ba8 <Error_Handler>
  }

}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200001e4 	.word	0x200001e4
 8001568:	40007400 	.word	0x40007400

0800156c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_DAC_MspInit+0x7c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d127      	bne.n	80015de <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_DAC_MspInit+0x80>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <HAL_DAC_MspInit+0x80>)
 8001598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_DAC_MspInit+0x80>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_DAC_MspInit+0x80>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_DAC_MspInit+0x80>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_DAC_MspInit+0x80>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015c6:	2330      	movs	r3, #48	; 0x30
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_DAC_MspInit+0x84>)
 80015da:	f003 f841 	bl	8004660 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40007400 	.word	0x40007400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_DMA_Init+0x78>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <MX_DMA_Init+0x78>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_DMA_Init+0x78>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_DMA_Init+0x78>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <MX_DMA_Init+0x78>)
 8001620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_DMA_Init+0x78>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2101      	movs	r1, #1
 8001636:	200e      	movs	r0, #14
 8001638:	f002 fb65 	bl	8003d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800163c:	200e      	movs	r0, #14
 800163e:	f002 fb7e 	bl	8003d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2101      	movs	r1, #1
 8001646:	200f      	movs	r0, #15
 8001648:	f002 fb5d 	bl	8003d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800164c:	200f      	movs	r0, #15
 800164e:	f002 fb76 	bl	8003d3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2038      	movs	r0, #56	; 0x38
 8001658:	f002 fb55 	bl	8003d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800165c:	2038      	movs	r0, #56	; 0x38
 800165e:	f002 fb6e 	bl	8003d3e <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	4b7e      	ldr	r3, [pc, #504]	; (8001884 <MX_GPIO_Init+0x214>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a7d      	ldr	r2, [pc, #500]	; (8001884 <MX_GPIO_Init+0x214>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b7b      	ldr	r3, [pc, #492]	; (8001884 <MX_GPIO_Init+0x214>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	4b77      	ldr	r3, [pc, #476]	; (8001884 <MX_GPIO_Init+0x214>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a76      	ldr	r2, [pc, #472]	; (8001884 <MX_GPIO_Init+0x214>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b74      	ldr	r3, [pc, #464]	; (8001884 <MX_GPIO_Init+0x214>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b70      	ldr	r3, [pc, #448]	; (8001884 <MX_GPIO_Init+0x214>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a6f      	ldr	r2, [pc, #444]	; (8001884 <MX_GPIO_Init+0x214>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b6d      	ldr	r3, [pc, #436]	; (8001884 <MX_GPIO_Init+0x214>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b69      	ldr	r3, [pc, #420]	; (8001884 <MX_GPIO_Init+0x214>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a68      	ldr	r2, [pc, #416]	; (8001884 <MX_GPIO_Init+0x214>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b66      	ldr	r3, [pc, #408]	; (8001884 <MX_GPIO_Init+0x214>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <MX_GPIO_Init+0x214>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a61      	ldr	r2, [pc, #388]	; (8001884 <MX_GPIO_Init+0x214>)
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <MX_GPIO_Init+0x214>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <MX_GPIO_Init+0x214>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a5a      	ldr	r2, [pc, #360]	; (8001884 <MX_GPIO_Init+0x214>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b58      	ldr	r3, [pc, #352]	; (8001884 <MX_GPIO_Init+0x214>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001734:	4854      	ldr	r0, [pc, #336]	; (8001888 <MX_GPIO_Init+0x218>)
 8001736:	f003 f945 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_2_GPIO_Port, RESET_2_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001740:	4852      	ldr	r0, [pc, #328]	; (800188c <MX_GPIO_Init+0x21c>)
 8001742:	f003 f93f 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_1_GPIO_Port, RESET_1_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174c:	4850      	ldr	r0, [pc, #320]	; (8001890 <MX_GPIO_Init+0x220>)
 800174e:	f003 f939 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001758:	484e      	ldr	r0, [pc, #312]	; (8001894 <MX_GPIO_Init+0x224>)
 800175a:	f003 f933 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	484c      	ldr	r0, [pc, #304]	; (8001898 <MX_GPIO_Init+0x228>)
 8001766:	f003 f92d 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FAULT_3_Pin;
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_3_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4846      	ldr	r0, [pc, #280]	; (8001898 <MX_GPIO_Init+0x228>)
 800177e:	f002 ff6f 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RESET_3_Pin|LED_4_Pin|LED_3_Pin|LED_1_Pin;
 8001782:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	483b      	ldr	r0, [pc, #236]	; (8001888 <MX_GPIO_Init+0x218>)
 800179c:	f002 ff60 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FAULT_2_Pin;
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_2_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	4836      	ldr	r0, [pc, #216]	; (800188c <MX_GPIO_Init+0x21c>)
 80017b4:	f002 ff54 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_2_Pin;
 80017b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_2_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	482e      	ldr	r0, [pc, #184]	; (800188c <MX_GPIO_Init+0x21c>)
 80017d2:	f002 ff45 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FAULT_1_Pin;
 80017d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FAULT_1_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4829      	ldr	r0, [pc, #164]	; (8001890 <MX_GPIO_Init+0x220>)
 80017ec:	f002 ff38 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_1_Pin;
 80017f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RESET_1_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	4821      	ldr	r0, [pc, #132]	; (8001890 <MX_GPIO_Init+0x220>)
 800180a:	f002 ff29 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = O_D_Led1_Pin|O_D_Led2_Pin|O_D_Led3_Pin|O_D_Led4_Pin;
 800180e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	481b      	ldr	r0, [pc, #108]	; (8001894 <MX_GPIO_Init+0x224>)
 8001828:	f002 ff1a 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 800182c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4814      	ldr	r0, [pc, #80]	; (8001898 <MX_GPIO_Init+0x228>)
 8001846:	f002 ff0b 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = KM_Pin|QF_Pin;
 800184a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <MX_GPIO_Init+0x218>)
 8001860:	f002 fefe 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SB_1_Pin|SB_2_Pin;
 8001864:	2305      	movs	r3, #5
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <MX_GPIO_Init+0x224>)
 8001878:	f002 fef2 	bl	8004660 <HAL_GPIO_Init>

}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40020800 	.word	0x40020800
 800188c:	40021000 	.word	0x40021000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40020000 	.word	0x40020000

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a0:	f001 fca4 	bl	80031ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a4:	f000 f84c 	bl	8001940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a8:	f7ff fee2 	bl	8001670 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ac:	f7ff fea2 	bl	80015f4 <MX_DMA_Init>
  MX_ADC1_Init();
 80018b0:	f7ff fc50 	bl	8001154 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018b4:	f7ff fcb8 	bl	8001228 <MX_ADC2_Init>
  MX_ADC3_Init();
 80018b8:	f7ff fd00 	bl	80012bc <MX_ADC3_Init>
  MX_TIM1_Init();
 80018bc:	f000 fc4e 	bl	800215c <MX_TIM1_Init>
  MX_DAC_Init();
 80018c0:	f7ff fe20 	bl	8001504 <MX_DAC_Init>
  MX_TIM3_Init();
 80018c4:	f000 fce6 	bl	8002294 <MX_TIM3_Init>
  MX_SPI2_Init();
 80018c8:	f000 f976 	bl	8001bb8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
Device_DAC_ON();
 80018cc:	f000 f8ac 	bl	8001a28 <Device_DAC_ON>

Device_ADC_Start(Device_ADC_Buf,3);
 80018d0:	2103      	movs	r1, #3
 80018d2:	4817      	ldr	r0, [pc, #92]	; (8001930 <main+0x94>)
 80018d4:	f000 f8b6 	bl	8001a44 <Device_ADC_Start>

/*                                    ENCODER SPI-DMA INIT                          */
  HAL_SPI_Init(&hspi2);
 80018d8:	4816      	ldr	r0, [pc, #88]	; (8001934 <main+0x98>)
 80018da:	f003 fcbb 	bl	8005254 <HAL_SPI_Init>
  HAL_SPI_MspInit(&hspi2);
 80018de:	4815      	ldr	r0, [pc, #84]	; (8001934 <main+0x98>)
 80018e0:	f000 f99c 	bl	8001c1c <HAL_SPI_MspInit>
  HAL_NVIC_DisableIRQ(DMA1_Stream3_IRQn);
 80018e4:	200e      	movs	r0, #14
 80018e6:	f002 fa38 	bl	8003d5a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA1_Stream4_IRQn);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f002 fa35 	bl	8003d5a <HAL_NVIC_DisableIRQ>
  HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)&speed.angle_f[0], 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	4911      	ldr	r1, [pc, #68]	; (8001938 <main+0x9c>)
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <main+0x98>)
 80018f6:	f003 fd11 	bl	800531c <HAL_SPI_Receive_DMA>


HAL_Delay(600);
 80018fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80018fe:	f001 fce7 	bl	80032d0 <HAL_Delay>

Device_MainTimerStart();
 8001902:	f000 f887 	bl	8001a14 <Device_MainTimerStart>
Device_PWM_Channels_ON();
 8001906:	f000 f8f3 	bl	8001af0 <Device_PWM_Channels_ON>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //Device_DAC_Out_PA4_CH1(enc_angle/8200.0f);
  Device_On_Led(O_D_Led1_GPIO_Port,O_D_Led1_Pin);
 800190a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <main+0xa0>)
 8001910:	f000 f90e 	bl	8001b30 <Device_On_Led>
  HAL_Delay(500);
 8001914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001918:	f001 fcda 	bl	80032d0 <HAL_Delay>
  Device_Off_Led(O_D_Led1_GPIO_Port,O_D_Led1_Pin);
 800191c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <main+0xa0>)
 8001922:	f000 f914 	bl	8001b4e <Device_Off_Led>
  HAL_Delay(500);
 8001926:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800192a:	f001 fcd1 	bl	80032d0 <HAL_Delay>
  Device_On_Led(O_D_Led1_GPIO_Port,O_D_Led1_Pin);
 800192e:	e7ec      	b.n	800190a <main+0x6e>
 8001930:	200001f8 	.word	0x200001f8
 8001934:	20000200 	.word	0x20000200
 8001938:	20000346 	.word	0x20000346
 800193c:	40020c00 	.word	0x40020c00

08001940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b094      	sub	sp, #80	; 0x50
 8001944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	2230      	movs	r2, #48	; 0x30
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f005 f9ac 	bl	8006cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <SystemClock_Config+0xcc>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <SystemClock_Config+0xcc>)
 800196e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001972:	6413      	str	r3, [r2, #64]	; 0x40
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <SystemClock_Config+0xcc>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <SystemClock_Config+0xd0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <SystemClock_Config+0xd0>)
 800198a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <SystemClock_Config+0xd0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800199c:	2301      	movs	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a6:	2302      	movs	r3, #2
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019b0:	2304      	movs	r3, #4
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80019b4:	2390      	movs	r3, #144	; 0x90
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019bc:	2304      	movs	r3, #4
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f817 	bl	80049f8 <HAL_RCC_OscConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019d0:	f000 f8ea 	bl	8001ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d4:	230f      	movs	r3, #15
 80019d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d8:	2302      	movs	r3, #2
 80019da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2104      	movs	r1, #4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fa70 	bl	8004ed8 <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019fe:	f000 f8d3 	bl	8001ba8 <Error_Handler>
  }
}
 8001a02:	bf00      	nop
 8001a04:	3750      	adds	r7, #80	; 0x50
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000

08001a14 <Device_MainTimerStart>:

/* USER CODE BEGIN 4 */
void Device_MainTimerStart(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
HAL_TIM_Base_Start_IT(&htim1); 
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <Device_MainTimerStart+0x10>)
 8001a1a:	f004 f888 	bl	8005b2e <HAL_TIM_Base_Start_IT>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200003a4 	.word	0x200003a4

08001a28 <Device_DAC_ON>:
{
HAL_TIM_Base_Stop_IT(&htim1); 
}

void Device_DAC_ON(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4804      	ldr	r0, [pc, #16]	; (8001a40 <Device_DAC_ON+0x18>)
 8001a30:	f002 f9cf 	bl	8003dd2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8001a34:	2110      	movs	r1, #16
 8001a36:	4802      	ldr	r0, [pc, #8]	; (8001a40 <Device_DAC_ON+0x18>)
 8001a38:	f002 f9cb 	bl	8003dd2 <HAL_DAC_Start>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200001e4 	.word	0x200001e4

08001a44 <Device_ADC_Start>:
void Device_ADC_Start(unsigned short *Device_ADC_Buf,unsigned short Lenght)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
  /*  x        1        x        x
ADC1  x,       iU,      x,       x.
ADC2  x,       iV,      x,       x.
ADC3  x,       iW,      x,       x.
*/
        __HAL_ADC_ENABLE(&hadc2);
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <Device_ADC_Start+0x98>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <Device_ADC_Start+0x98>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc3);
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <Device_ADC_Start+0x9c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <Device_ADC_Start+0x9c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	609a      	str	r2, [r3, #8]
HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)Device_ADC_Buf, Lenght);
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	461a      	mov	r2, r3
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	481b      	ldr	r0, [pc, #108]	; (8001ae4 <Device_ADC_Start+0xa0>)
 8001a78:	f001 fecc 	bl	8003814 <HAL_ADCEx_MultiModeStart_DMA>
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TC);
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0210 	bic.w	r2, r2, #16
 8001a8a:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0208 	bic.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TE);
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0204 	bic.w	r2, r2, #4
 8001aaa:	601a      	str	r2, [r3, #0]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_FE);
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aba:	615a      	str	r2, [r3, #20]
__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_DME);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <Device_ADC_Start+0xa4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0202 	bic.w	r2, r2, #2
 8001aca:	601a      	str	r2, [r3, #0]
HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);  
 8001acc:	2100      	movs	r1, #0
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <Device_ADC_Start+0xa8>)
 8001ad0:	f004 f886 	bl	8005be0 <HAL_TIM_OC_Start>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200000ac 	.word	0x200000ac
 8001ae0:	2000013c 	.word	0x2000013c
 8001ae4:	200000f4 	.word	0x200000f4
 8001ae8:	20000184 	.word	0x20000184
 8001aec:	20000364 	.word	0x20000364

08001af0 <Device_PWM_Channels_ON>:

void Device_PWM_Channels_ON(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 8001af4:	2205      	movs	r2, #5
 8001af6:	2100      	movs	r1, #0
 8001af8:	480b      	ldr	r0, [pc, #44]	; (8001b28 <Device_PWM_Channels_ON+0x38>)
 8001afa:	f004 ffa5 	bl	8006a48 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 8001afe:	2205      	movs	r2, #5
 8001b00:	2104      	movs	r1, #4
 8001b02:	4809      	ldr	r0, [pc, #36]	; (8001b28 <Device_PWM_Channels_ON+0x38>)
 8001b04:	f004 ffa0 	bl	8006a48 <TIM_CCxChannelCmd>
TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE | TIM_CCxN_ENABLE);
 8001b08:	2205      	movs	r2, #5
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	4806      	ldr	r0, [pc, #24]	; (8001b28 <Device_PWM_Channels_ON+0x38>)
 8001b0e:	f004 ff9b 	bl	8006a48 <TIM_CCxChannelCmd>
__HAL_TIM_MOE_ENABLE(&htim1);
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <Device_PWM_Channels_ON+0x3c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <Device_PWM_Channels_ON+0x3c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	200003a4 	.word	0x200003a4

08001b30 <Device_On_Led>:
{
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void Device_On_Led(GPIO_TypeDef *LED_GPIO_Port, uint16_t LED_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
  LED_GPIO_Port->BSRR = LED_Pin;
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <Device_Off_Led>:

void Device_Off_Led(GPIO_TypeDef *LED_GPIO_Port, uint16_t LED_Pin)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	807b      	strh	r3, [r7, #2]
  LED_GPIO_Port->BSRR = LED_Pin<<16;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041b      	lsls	r3, r3, #16
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <Device_DAC_Out_PA4_CH1>:

void Device_DAC_Out_PA4_CH1(float PA4_ch1)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	ed87 0a01 	vstr	s0, [r7, #4]
    HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,(int)(PA4_ch1*4096.0f));
 8001b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001ba0 <Device_DAC_Out_PA4_CH1+0x30>
 8001b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8a:	ee17 3a90 	vmov	r3, s15
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <Device_DAC_Out_PA4_CH1+0x34>)
 8001b94:	f002 f9d0 	bl	8003f38 <HAL_DAC_SetValue>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	45800000 	.word	0x45800000
 8001ba4:	200001e4 	.word	0x200001e4

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <MX_SPI2_Init+0x60>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <MX_SPI2_Init+0x5c>)
 8001c02:	f003 fb27 	bl	8005254 <HAL_SPI_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8001c0c:	f7ff ffcc 	bl	8001ba8 <Error_Handler>
  }

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000200 	.word	0x20000200
 8001c18:	40003800 	.word	0x40003800

08001c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_SPI_MspInit+0x148>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f040 808d 	bne.w	8001d5a <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_SPI_MspInit+0x14c>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <HAL_SPI_MspInit+0x14c>)
 8001c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <HAL_SPI_MspInit+0x14c>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_SPI_MspInit+0x14c>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4a40      	ldr	r2, [pc, #256]	; (8001d68 <HAL_SPI_MspInit+0x14c>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_SPI_MspInit+0x14c>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001c78:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4835      	ldr	r0, [pc, #212]	; (8001d6c <HAL_SPI_MspInit+0x150>)
 8001c96:	f002 fce3 	bl	8004660 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001c9c:	4a35      	ldr	r2, [pc, #212]	; (8001d74 <HAL_SPI_MspInit+0x158>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001cca:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001cde:	4824      	ldr	r0, [pc, #144]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001ce0:	f002 f950 	bl	8003f84 <HAL_DMA_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 8001cea:	f7ff ff5d 	bl	8001ba8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cf2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_SPI_MspInit+0x154>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_SPI_MspInit+0x160>)
 8001cfe:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d20:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d28:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d30:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d40:	f002 f920 	bl	8003f84 <HAL_DMA_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 8001d4a:	f7ff ff2d 	bl	8001ba8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d52:	649a      	str	r2, [r3, #72]	; 0x48
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_SPI_MspInit+0x15c>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40003800 	.word	0x40003800
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	20000258 	.word	0x20000258
 8001d74:	40026058 	.word	0x40026058
 8001d78:	200002b8 	.word	0x200002b8
 8001d7c:	40026070 	.word	0x40026070

08001d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_MspInit+0x4c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_MspInit+0x4c>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_MspInit+0x4c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_MspInit+0x4c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_MspInit+0x4c>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <MemManage_Handler+0x4>

08001dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <BusFault_Handler+0x4>

08001df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <UsageFault_Handler+0x4>

08001df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e24:	f001 fa34 	bl	8003290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <DMA1_Stream3_IRQHandler+0x10>)
 8001e32:	f002 f9ad 	bl	8004190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000258 	.word	0x20000258

08001e40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <DMA1_Stream4_IRQHandler+0x10>)
 8001e46:	f002 f9a3 	bl	8004190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200002b8 	.word	0x200002b8

08001e54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

static float Bufer_A_B[2];
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e58:	4888      	ldr	r0, [pc, #544]	; (800207c <TIM1_UP_TIM10_IRQHandler+0x228>)
 8001e5a:	f003 ff2a 	bl	8005cb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /*########################################################################*/
  
    Speed_measure(&speed);
 8001e5e:	4888      	ldr	r0, [pc, #544]	; (8002080 <TIM1_UP_TIM10_IRQHandler+0x22c>)
 8001e60:	f000 fbba 	bl	80025d8 <Speed_measure>
    Current_measure(i_ABC,Device_ADC_Buf);
 8001e64:	4987      	ldr	r1, [pc, #540]	; (8002084 <TIM1_UP_TIM10_IRQHandler+0x230>)
 8001e66:	4888      	ldr	r0, [pc, #544]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x234>)
 8001e68:	f000 fc5c 	bl	8002724 <Current_measure>
   
    DSP_K_Conv_ABC_to_ab(i_ABC,i_ab);
 8001e6c:	4987      	ldr	r1, [pc, #540]	; (800208c <TIM1_UP_TIM10_IRQHandler+0x238>)
 8001e6e:	4886      	ldr	r0, [pc, #536]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x234>)
 8001e70:	f000 fb8e 	bl	8002590 <DSP_K_Conv_ABC_to_ab>
    
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) == 1){
 8001e74:	2101      	movs	r1, #1
 8001e76:	4886      	ldr	r0, [pc, #536]	; (8002090 <TIM1_UP_TIM10_IRQHandler+0x23c>)
 8001e78:	f002 fd8c 	bl	8004994 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <TIM1_UP_TIM10_IRQHandler+0x34>
    	neww = 50.0f;
 8001e82:	4b84      	ldr	r3, [pc, #528]	; (8002094 <TIM1_UP_TIM10_IRQHandler+0x240>)
 8001e84:	4a84      	ldr	r2, [pc, #528]	; (8002098 <TIM1_UP_TIM10_IRQHandler+0x244>)
 8001e86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 1){
 8001e88:	2104      	movs	r1, #4
 8001e8a:	4881      	ldr	r0, [pc, #516]	; (8002090 <TIM1_UP_TIM10_IRQHandler+0x23c>)
 8001e8c:	f002 fd82 	bl	8004994 <HAL_GPIO_ReadPin>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d103      	bne.n	8001e9e <TIM1_UP_TIM10_IRQHandler+0x4a>
    	neww = 0.0f;
 8001e96:	4b7f      	ldr	r3, [pc, #508]	; (8002094 <TIM1_UP_TIM10_IRQHandler+0x240>)
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    }

  
  if(cnt <= 98){
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x248>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2b62      	cmp	r3, #98	; 0x62
 8001ea4:	d806      	bhi.n	8001eb4 <TIM1_UP_TIM10_IRQHandler+0x60>
    cnt++;
 8001ea6:	4b7d      	ldr	r3, [pc, #500]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x248>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b7b      	ldr	r3, [pc, #492]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x248>)
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	e057      	b.n	8001f64 <TIM1_UP_TIM10_IRQHandler+0x110>
  }
  else {
    if ((flag != 0.5f)){
 8001eb4:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x24c>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ebe:	eef4 7a47 	vcmp.f32	s15, s14
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d00d      	beq.n	8001ee4 <TIM1_UP_TIM10_IRQHandler+0x90>
      if ((flag != 1.0f)){
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x24c>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ed2:	eef4 7a47 	vcmp.f32	s15, s14
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	d003      	beq.n	8001ee4 <TIM1_UP_TIM10_IRQHandler+0x90>
        
        flag = 0;
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x24c>)
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
        
      }
    }
   
    if((Freq < neww) && (Freq >= 0)){
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <TIM1_UP_TIM10_IRQHandler+0x240>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	d513      	bpl.n	8001f22 <TIM1_UP_TIM10_IRQHandler+0xce>
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f08:	db0b      	blt.n	8001f22 <TIM1_UP_TIM10_IRQHandler+0xce>
      Freq = Freq + flag;
 8001f0a:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f0c:	ed93 7a00 	vldr	s14, [r3]
 8001f10:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x24c>)
 8001f12:	edd3 7a00 	vldr	s15, [r3]
 8001f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f1c:	edc3 7a00 	vstr	s15, [r3]
 8001f20:	e01d      	b.n	8001f5e <TIM1_UP_TIM10_IRQHandler+0x10a>
    }
    else if((Freq > neww) && (Freq > 0)){
 8001f22:	4b60      	ldr	r3, [pc, #384]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <TIM1_UP_TIM10_IRQHandler+0x240>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	dd12      	ble.n	8001f5e <TIM1_UP_TIM10_IRQHandler+0x10a>
 8001f38:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	dd0a      	ble.n	8001f5e <TIM1_UP_TIM10_IRQHandler+0x10a>
        Freq = Freq - flag;
 8001f48:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <TIM1_UP_TIM10_IRQHandler+0x24c>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
    }
  cnt = 0;
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x248>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	801a      	strh	r2, [r3, #0]
  }
  
  if (Freq <= 0.0f){
 8001f64:	4b4f      	ldr	r3, [pc, #316]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	d803      	bhi.n	8001f7c <TIM1_UP_TIM10_IRQHandler+0x128>
      Freq = 0.0f;
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    }
  
  if (Freq >= 250.0f){
 8001f7c:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80020a8 <TIM1_UP_TIM10_IRQHandler+0x254>
 8001f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	db02      	blt.n	8001f96 <TIM1_UP_TIM10_IRQHandler+0x142>
      Freq = 250.0f;
 8001f90:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f92:	4a46      	ldr	r2, [pc, #280]	; (80020ac <TIM1_UP_TIM10_IRQHandler+0x258>)
 8001f94:	601a      	str	r2, [r3, #0]
    }
  
  if(Freq <= 50.0f){
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80020b0 <TIM1_UP_TIM10_IRQHandler+0x25c>
 8001fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	d80a      	bhi.n	8001fc0 <TIM1_UP_TIM10_IRQHandler+0x16c>
    Amp = Freq/50.0f;
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001fac:	ed93 7a00 	vldr	s14, [r3]
 8001fb0:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80020b0 <TIM1_UP_TIM10_IRQHandler+0x25c>
 8001fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x260>)
 8001fba:	edc3 7a00 	vstr	s15, [r3]
 8001fbe:	e003      	b.n	8001fc8 <TIM1_UP_TIM10_IRQHandler+0x174>
  }
  else{
    Amp = 50.0f/50.0f;
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x260>)
 8001fc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fc6:	601a      	str	r2, [r3, #0]
  }
  
  /*########################################################################*/
  
  AngleSpeed = 2.0f*PI*Freq;
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x250>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80020b8 <TIM1_UP_TIM10_IRQHandler+0x264>
 8001fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <TIM1_UP_TIM10_IRQHandler+0x268>)
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
  Delta_Angle = AngleSpeed*0.0001f;
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <TIM1_UP_TIM10_IRQHandler+0x268>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80020c0 <TIM1_UP_TIM10_IRQHandler+0x26c>
 8001fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <TIM1_UP_TIM10_IRQHandler+0x270>)
 8001fec:	edc3 7a00 	vstr	s15, [r3]

  DSP_K_Polar_to_AB(Amp, El_Angle, Bufer_A_B);
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <TIM1_UP_TIM10_IRQHandler+0x260>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x274>)
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	4833      	ldr	r0, [pc, #204]	; (80020cc <TIM1_UP_TIM10_IRQHandler+0x278>)
 8001ffe:	eef0 0a47 	vmov.f32	s1, s14
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	f000 fa9c 	bl	8002542 <DSP_K_Polar_to_AB>
  El_Angle+=Delta_Angle*Delta_Angle_Gain;
 800200a:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <TIM1_UP_TIM10_IRQHandler+0x270>)
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <TIM1_UP_TIM10_IRQHandler+0x27c>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x274>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x274>)
 8002026:	edc3 7a00 	vstr	s15, [r3]
  DSP_K_SVPWM(TIM1, Bufer_A_B[0], Bufer_A_B[1]);
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <TIM1_UP_TIM10_IRQHandler+0x278>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <TIM1_UP_TIM10_IRQHandler+0x278>)
 8002032:	ed93 7a01 	vldr	s14, [r3, #4]
 8002036:	eef0 0a47 	vmov.f32	s1, s14
 800203a:	eeb0 0a67 	vmov.f32	s0, s15
 800203e:	4825      	ldr	r0, [pc, #148]	; (80020d4 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002040:	f000 fbb4 	bl	80027ac <DSP_K_SVPWM>
  Device_DAC_Out_PA4_CH1(i_ab[1]+0.5f);
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <TIM1_UP_TIM10_IRQHandler+0x238>)
 8002046:	edd3 7a01 	vldr	s15, [r3, #4]
 800204a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800204e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002052:	eeb0 0a67 	vmov.f32	s0, s15
 8002056:	f7ff fd8b 	bl	8001b70 <Device_DAC_Out_PA4_CH1>
  //Device_DAC_Out_PA4_CH1((currents.i_u+40.0f)/80.0f);
  //Device_DAC_Out_PA5_CH2(Device_ADC_Buf[0]));
  //HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R,Device_ADC_Buf[0]);
 if(El_Angle>=8*PI) El_Angle = 0.0f;
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x274>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80020d8 <TIM1_UP_TIM10_IRQHandler+0x284>
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	da00      	bge.n	8002070 <TIM1_UP_TIM10_IRQHandler+0x21c>
  
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800206e:	e003      	b.n	8002078 <TIM1_UP_TIM10_IRQHandler+0x224>
 if(El_Angle>=8*PI) El_Angle = 0.0f;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <TIM1_UP_TIM10_IRQHandler+0x274>)
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200003a4 	.word	0x200003a4
 8002080:	20000344 	.word	0x20000344
 8002084:	200001f8 	.word	0x200001f8
 8002088:	2000032c 	.word	0x2000032c
 800208c:	2000031c 	.word	0x2000031c
 8002090:	40020c00 	.word	0x40020c00
 8002094:	20000360 	.word	0x20000360
 8002098:	42480000 	.word	0x42480000
 800209c:	20000324 	.word	0x20000324
 80020a0:	20000004 	.word	0x20000004
 80020a4:	20000338 	.word	0x20000338
 80020a8:	437a0000 	.word	0x437a0000
 80020ac:	437a0000 	.word	0x437a0000
 80020b0:	42480000 	.word	0x42480000
 80020b4:	20000328 	.word	0x20000328
 80020b8:	40c90fdb 	.word	0x40c90fdb
 80020bc:	20000318 	.word	0x20000318
 80020c0:	38d1b717 	.word	0x38d1b717
 80020c4:	2000033c 	.word	0x2000033c
 80020c8:	20000340 	.word	0x20000340
 80020cc:	20000098 	.word	0x20000098
 80020d0:	20000000 	.word	0x20000000
 80020d4:	40010000 	.word	0x40010000
 80020d8:	41c90fdb 	.word	0x41c90fdb

080020dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <DMA2_Stream0_IRQHandler+0x10>)
 80020e2:	f002 f855 	bl	8004190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000184 	.word	0x20000184

080020f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <SystemInit+0x60>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <SystemInit+0x60>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <SystemInit+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <SystemInit+0x64>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <SystemInit+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <SystemInit+0x64>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <SystemInit+0x64>)
 800211c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <SystemInit+0x64>)
 8002128:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <SystemInit+0x68>)
 800212a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <SystemInit+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <SystemInit+0x64>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <SystemInit+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SystemInit+0x60>)
 8002140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002144:	609a      	str	r2, [r3, #8]
#endif
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00
 8002154:	40023800 	.word	0x40023800
 8002158:	24003010 	.word	0x24003010

0800215c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b092      	sub	sp, #72	; 0x48
 8002160:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002162:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	615a      	str	r2, [r3, #20]
 800217e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2220      	movs	r2, #32
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fd90 	bl	8006cac <memset>

  htim1.Instance = TIM1;
 800218c:	4b3f      	ldr	r3, [pc, #252]	; (800228c <MX_TIM1_Init+0x130>)
 800218e:	4a40      	ldr	r2, [pc, #256]	; (8002290 <MX_TIM1_Init+0x134>)
 8002190:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <MX_TIM1_Init+0x130>)
 8002194:	2201      	movs	r2, #1
 8002196:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002198:	4b3c      	ldr	r3, [pc, #240]	; (800228c <MX_TIM1_Init+0x130>)
 800219a:	2220      	movs	r2, #32
 800219c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200;
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <MX_TIM1_Init+0x130>)
 80021a0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80021a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <MX_TIM1_Init+0x130>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <MX_TIM1_Init+0x130>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <MX_TIM1_Init+0x130>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021b8:	4834      	ldr	r0, [pc, #208]	; (800228c <MX_TIM1_Init+0x130>)
 80021ba:	f003 fd4f 	bl	8005c5c <HAL_TIM_PWM_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80021c4:	f7ff fcf0 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80021c8:	2310      	movs	r3, #16
 80021ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021d4:	4619      	mov	r1, r3
 80021d6:	482d      	ldr	r0, [pc, #180]	; (800228c <MX_TIM1_Init+0x130>)
 80021d8:	f004 fc5c 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80021e2:	f7ff fce1 	bl	8001ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e6:	2360      	movs	r3, #96	; 0x60
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002206:	2200      	movs	r2, #0
 8002208:	4619      	mov	r1, r3
 800220a:	4820      	ldr	r0, [pc, #128]	; (800228c <MX_TIM1_Init+0x130>)
 800220c:	f003 feba 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002216:	f7ff fcc7 	bl	8001ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	2204      	movs	r2, #4
 8002220:	4619      	mov	r1, r3
 8002222:	481a      	ldr	r0, [pc, #104]	; (800228c <MX_TIM1_Init+0x130>)
 8002224:	f003 feae 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800222e:	f7ff fcbb 	bl	8001ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	2208      	movs	r2, #8
 8002238:	4619      	mov	r1, r3
 800223a:	4814      	ldr	r0, [pc, #80]	; (800228c <MX_TIM1_Init+0x130>)
 800223c:	f003 fea2 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002246:	f7ff fcaf 	bl	8001ba8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 250;
 8002256:	23fa      	movs	r3, #250	; 0xfa
 8002258:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800225e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002262:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <MX_TIM1_Init+0x130>)
 800226e:	f004 fc8d 	bl	8006b8c <HAL_TIMEx_ConfigBreakDeadTime>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8002278:	f7ff fc96 	bl	8001ba8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <MX_TIM1_Init+0x130>)
 800227e:	f000 f8dd 	bl	800243c <HAL_TIM_MspPostInit>

}
 8002282:	bf00      	nop
 8002284:	3748      	adds	r7, #72	; 0x48
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200003a4 	.word	0x200003a4
 8002290:	40010000 	.word	0x40010000

08002294 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b092      	sub	sp, #72	; 0x48
 8002298:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c2:	463b      	mov	r3, r7
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <MX_TIM3_Init+0x10c>)
 80022d6:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <MX_TIM3_Init+0x110>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <MX_TIM3_Init+0x10c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <MX_TIM3_Init+0x10c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <MX_TIM3_Init+0x10c>)
 80022e8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <MX_TIM3_Init+0x10c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <MX_TIM3_Init+0x10c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022fa:	4829      	ldr	r0, [pc, #164]	; (80023a0 <MX_TIM3_Init+0x10c>)
 80022fc:	f003 fbec 	bl	8005ad8 <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002306:	f7ff fc4f 	bl	8001ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002310:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002314:	4619      	mov	r1, r3
 8002316:	4822      	ldr	r0, [pc, #136]	; (80023a0 <MX_TIM3_Init+0x10c>)
 8002318:	f003 fefa 	bl	8006110 <HAL_TIM_ConfigClockSource>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002322:	f7ff fc41 	bl	8001ba8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002326:	481e      	ldr	r0, [pc, #120]	; (80023a0 <MX_TIM3_Init+0x10c>)
 8002328:	f003 fc25 	bl	8005b76 <HAL_TIM_OC_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8002332:	f7ff fc39 	bl	8001ba8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002336:	2305      	movs	r3, #5
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800233e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	4816      	ldr	r0, [pc, #88]	; (80023a0 <MX_TIM3_Init+0x10c>)
 8002346:	f003 ff9a 	bl	800627e <HAL_TIM_SlaveConfigSynchro>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8002350:	f7ff fc2a 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	480f      	ldr	r0, [pc, #60]	; (80023a0 <MX_TIM3_Init+0x10c>)
 8002364:	f004 fb96 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800236e:	f7ff fc1b 	bl	8001ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002372:	2330      	movs	r3, #48	; 0x30
 8002374:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002382:	463b      	mov	r3, r7
 8002384:	2200      	movs	r2, #0
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_TIM3_Init+0x10c>)
 800238a:	f003 fd9b 	bl	8005ec4 <HAL_TIM_OC_ConfigChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002394:	f7ff fc08 	bl	8001ba8 <Error_Handler>
  }

}
 8002398:	bf00      	nop
 800239a:	3748      	adds	r7, #72	; 0x48
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000364 	.word	0x20000364
 80023a4:	40000400 	.word	0x40000400

080023a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_TIM_PWM_MspInit+0x48>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d115      	bne.n	80023e6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2019      	movs	r0, #25
 80023dc:	f001 fc93 	bl	8003d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023e0:	2019      	movs	r0, #25
 80023e2:	f001 fcac 	bl	8003d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_TIM_Base_MspInit+0x3c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10d      	bne.n	8002426 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_TIM_Base_MspInit+0x40>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_TIM_Base_MspInit+0x40>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_TIM_Base_MspInit+0x40>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40000400 	.word	0x40000400
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <HAL_TIM_MspPostInit+0xa4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d13c      	bne.n	80024d8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_TIM_MspPostInit+0xa8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_TIM_MspPostInit+0xa8>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_TIM_MspPostInit+0xa8>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_TIM_MspPostInit+0xa8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_TIM_MspPostInit+0xa8>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_TIM_MspPostInit+0xa8>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = VL_Pin|WL_Pin;
 8002496:	2303      	movs	r3, #3
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <HAL_TIM_MspPostInit+0xac>)
 80024b2:	f002 f8d5 	bl	8004660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UL_Pin|UH_Pin|VH_Pin|WH_Pin;
 80024b6:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <HAL_TIM_MspPostInit+0xb0>)
 80024d4:	f002 f8c4 	bl	8004660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40021000 	.word	0x40021000

080024f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002528 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024f6:	e003      	b.n	8002500 <LoopCopyDataInit>

080024f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024fe:	3104      	adds	r1, #4

08002500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002508:	d3f6      	bcc.n	80024f8 <CopyDataInit>
  ldr  r2, =_sbss
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800250c:	e002      	b.n	8002514 <LoopFillZerobss>

0800250e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800250e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002510:	f842 3b04 	str.w	r3, [r2], #4

08002514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002518:	d3f9      	bcc.n	800250e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800251a:	f7ff fde9 	bl	80020f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251e:	f004 fba1 	bl	8006c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002522:	f7ff f9bb 	bl	800189c <main>
  bx  lr    
 8002526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002528:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800252c:	080075b4 	.word	0x080075b4
  ldr  r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002534:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002538:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800253c:	200003e8 	.word	0x200003e8

08002540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC_IRQHandler>

08002542 <DSP_K_Polar_to_AB>:
}
/*
DSP_K_Polar_to_AB
*/
void DSP_K_Polar_to_AB(float Amp, float Rad, float *Bufer_A_B)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	ed87 0a03 	vstr	s0, [r7, #12]
 800254c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002550:	6078      	str	r0, [r7, #4]
*Bufer_A_B     = Amp * arm_cos_f32(Rad);
 8002552:	ed97 0a02 	vldr	s0, [r7, #8]
 8002556:	f7fe fcf5 	bl	8000f44 <arm_cos_f32>
 800255a:	eeb0 7a40 	vmov.f32	s14, s0
 800255e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	edc3 7a00 	vstr	s15, [r3]
*(Bufer_A_B+1) = Amp * arm_sin_f32(Rad);
 800256c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002570:	f7fe fd64 	bl	800103c <arm_sin_f32>
 8002574:	eeb0 7a40 	vmov.f32	s14, s0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	edc3 7a00 	vstr	s15, [r3]
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <DSP_K_Conv_ABC_to_ab>:
/*
DSP_K_Conv_ABC_to_ab

*/
void DSP_K_Conv_ABC_to_ab(float *A_B_C, float *a_b)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]

a_b[0] = A_B_C[0]*1.0f;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	601a      	str	r2, [r3, #0]
a_b[1] = 1.0f/SQRT3*(A_B_C[1]-A_B_C[2])*1.0f;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	ed93 7a00 	vldr	s14, [r3]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3308      	adds	r3, #8
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	3304      	adds	r3, #4
 80025ba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80025d4 <DSP_K_Conv_ABC_to_ab+0x44>
 80025be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c2:	edc3 7a00 	vstr	s15, [r3]

}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	3f13cd3a 	.word	0x3f13cd3a

080025d8 <Speed_measure>:

/*
Encoder KUBLER speed measure
*/

void Speed_measure(Speed_structure *Spd){
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    
  
 if(Spd->cnt_s < 19){
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d806      	bhi.n	80025f6 <Speed_measure+0x1e>
    Spd->cnt_s++;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	801a      	strh	r2, [r3, #0]
    Spd->speed_el = 0;
  }
  Spd->cnt_s = 0;
  }

}
 80025f4:	e08b      	b.n	800270e <Speed_measure+0x136>
  Spd->angle_f[4] = Spd->angle_f[3];
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	891a      	ldrh	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	815a      	strh	r2, [r3, #10]
  Spd->angle_f[3] = Spd->angle_f[2];
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	88da      	ldrh	r2, [r3, #6]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	811a      	strh	r2, [r3, #8]
  Spd->angle_f[2] = Spd->angle_f[1];
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	889a      	ldrh	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	80da      	strh	r2, [r3, #6]
  Spd->angle_f[1] = Spd->angle_f[0];
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	885a      	ldrh	r2, [r3, #2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	809a      	strh	r2, [r3, #4]
  if(Spd->angle_f[0] != Spd->angle_f[1]){
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	885a      	ldrh	r2, [r3, #2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	889b      	ldrh	r3, [r3, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d007      	beq.n	8002632 <Speed_measure+0x5a>
    Spd->angle_d[0] = Spd->angle_f[0] - Spd->angle_f[1];
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	885a      	ldrh	r2, [r3, #2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	889b      	ldrh	r3, [r3, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	b29a      	uxth	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	819a      	strh	r2, [r3, #12]
  if(Spd->angle_f[1] != Spd->angle_f[2]){
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	889a      	ldrh	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	88db      	ldrh	r3, [r3, #6]
 800263a:	429a      	cmp	r2, r3
 800263c:	d007      	beq.n	800264e <Speed_measure+0x76>
    Spd->angle_d[1] = Spd->angle_f[1] - Spd->angle_f[2];
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	889a      	ldrh	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	88db      	ldrh	r3, [r3, #6]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	81da      	strh	r2, [r3, #14]
  if(Spd->angle_f[2] != Spd->angle_f[3]){
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	88da      	ldrh	r2, [r3, #6]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	891b      	ldrh	r3, [r3, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	d007      	beq.n	800266a <Speed_measure+0x92>
    Spd->angle_d[2] = Spd->angle_f[2] - Spd->angle_f[3];
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	88da      	ldrh	r2, [r3, #6]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	891b      	ldrh	r3, [r3, #8]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	821a      	strh	r2, [r3, #16]
  if(Spd->angle_f[3] != Spd->angle_f[4]){
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	891a      	ldrh	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	895b      	ldrh	r3, [r3, #10]
 8002672:	429a      	cmp	r2, r3
 8002674:	d007      	beq.n	8002686 <Speed_measure+0xae>
    Spd->angle_d[3] = Spd->angle_f[3] - Spd->angle_f[4];
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	891a      	ldrh	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	895b      	ldrh	r3, [r3, #10]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	825a      	strh	r2, [r3, #18]
  if((Spd->angle_d[0] - Spd->angle_d[1]) < 2){
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	899b      	ldrh	r3, [r3, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	89db      	ldrh	r3, [r3, #14]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	dc1c      	bgt.n	80026d0 <Speed_measure+0xf8>
    if((Spd->angle_d[1] - Spd->angle_d[2]) < 2){
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	89db      	ldrh	r3, [r3, #14]
 800269a:	461a      	mov	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8a1b      	ldrh	r3, [r3, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	dc14      	bgt.n	80026d0 <Speed_measure+0xf8>
      if((Spd->angle_d[2] - Spd->angle_d[3]) < 2){
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8a1b      	ldrh	r3, [r3, #16]
 80026aa:	461a      	mov	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8a5b      	ldrh	r3, [r3, #18]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	dc0c      	bgt.n	80026d0 <Speed_measure+0xf8>
        Spd->speed = Spd->angle_d[2]*0.0610426f;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	8a1b      	ldrh	r3, [r3, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800271c <Speed_measure+0x144>
 80026c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edc3 7a05 	vstr	s15, [r3, #20]
  Spd->speed_el = Spd->speed*3.0f;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80026d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80026da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	edc3 7a06 	vstr	s15, [r3, #24]
  if(Spd->speed_el > 200){
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80026ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002720 <Speed_measure+0x148>
 80026ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f6:	dd07      	ble.n	8002708 <Speed_measure+0x130>
    Spd->speed = 0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
    Spd->speed_el = 0;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  Spd->cnt_s = 0;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	801a      	strh	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	3d7a07ce 	.word	0x3d7a07ce
 8002720:	43480000 	.word	0x43480000

08002724 <Current_measure>:

void Current_measure(float *iABC, unsigned short *ADC_Buf){
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
    
  iABC[0] = (float)((ADC_Buf[0]>>2) - 589) / 512;            //i_U
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	b29b      	uxth	r3, r3
 8002736:	f2a3 234d 	subw	r3, r3, #589	; 0x24d
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002742:	eddf 6a19 	vldr	s13, [pc, #100]	; 80027a8 <Current_measure+0x84>
 8002746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	edc3 7a00 	vstr	s15, [r3]
  iABC[1] = (float)((ADC_Buf[1]>>2) - 587) / 512;            //i_V
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3302      	adds	r3, #2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	b29b      	uxth	r3, r3
 800275a:	f2a3 234b 	subw	r3, r3, #587	; 0x24b
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80027a8 <Current_measure+0x84>
 800276e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002772:	edc3 7a00 	vstr	s15, [r3]
  iABC[2] = (float)((ADC_Buf[2]>>2) - 585) / 512;            //i_W
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3304      	adds	r3, #4
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	b29b      	uxth	r3, r3
 8002780:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3308      	adds	r3, #8
 8002790:	eddf 6a05 	vldr	s13, [pc, #20]	; 80027a8 <Current_measure+0x84>
 8002794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002798:	edc3 7a00 	vstr	s15, [r3]
  
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	44000000 	.word	0x44000000

080027ac <DSP_K_SVPWM>:

/*
DSP_K_PWM_TIM1_Blocked_4VT
*/
void DSP_K_SVPWM(TIM_TypeDef *Tim, float A, float B)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08e      	sub	sp, #56	; 0x38
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80027b8:	edc7 0a01 	vstr	s1, [r7, #4]
 
static float bufer[2];

float f_sin      = 0.0f;
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
float f_sin_0_60 = 0.0f;
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30

float f_cos      = 0.0f;
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
float f_cos_0_60 = 0.0f;
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
 
static float module     = 0.0f;

float Tb1 = 0.0f;
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
float Tb2 = 0.0f;
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
float T0  = 0.0f;
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]

float t1 = 0.0f;
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
float t2 = 0.0f;
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
float t3  = 0.0f;
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]


bufer[0]=A;
 80027f8:	4adb      	ldr	r2, [pc, #876]	; (8002b68 <DSP_K_SVPWM+0x3bc>)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6013      	str	r3, [r2, #0]
bufer[1]=B;
 80027fe:	4ada      	ldr	r2, [pc, #872]	; (8002b68 <DSP_K_SVPWM+0x3bc>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6053      	str	r3, [r2, #4]
arm_cmplx_mag_f32(bufer,&module,2);
 8002804:	2202      	movs	r2, #2
 8002806:	49d9      	ldr	r1, [pc, #868]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 8002808:	48d7      	ldr	r0, [pc, #860]	; (8002b68 <DSP_K_SVPWM+0x3bc>)
 800280a:	f7fe fa7b 	bl	8000d04 <arm_cmplx_mag_f32>

f_sin = bufer[1] / module;
 800280e:	4bd6      	ldr	r3, [pc, #856]	; (8002b68 <DSP_K_SVPWM+0x3bc>)
 8002810:	edd3 6a01 	vldr	s13, [r3, #4]
 8002814:	4bd5      	ldr	r3, [pc, #852]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 8002816:	ed93 7a00 	vldr	s14, [r3]
 800281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
f_cos = bufer[0] / module;
 8002822:	4bd1      	ldr	r3, [pc, #836]	; (8002b68 <DSP_K_SVPWM+0x3bc>)
 8002824:	edd3 6a00 	vldr	s13, [r3]
 8002828:	4bd0      	ldr	r3, [pc, #832]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 800282a:	ed93 7a00 	vldr	s14, [r3]
 800282e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002832:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

if(module==0)
 8002836:	4bcd      	ldr	r3, [pc, #820]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	d119      	bne.n	800287a <DSP_K_SVPWM+0xce>
{
Tim->CCR1 = (int)Tim->ARR/2;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	0fda      	lsrs	r2, r3, #31
 800284c:	4413      	add	r3, r2
 800284e:	105b      	asrs	r3, r3, #1
 8002850:	461a      	mov	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)Tim->ARR/2;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	0fda      	lsrs	r2, r3, #31
 800285c:	4413      	add	r3, r2
 800285e:	105b      	asrs	r3, r3, #1
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)Tim->ARR/2;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	0fda      	lsrs	r2, r3, #31
 800286c:	4413      	add	r3, r2
 800286e:	105b      	asrs	r3, r3, #1
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c
//sin_data = arm_sin_f32(0.01f);
//Tick=DWT_CYCCNT;



 8002876:	f000 bcad 	b.w	80031d4 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_0) && (f_sin < sin_60)  &&\
 800287a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800287e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	f2c0 80a9 	blt.w	80029dc <DSP_K_SVPWM+0x230>
 800288a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800288e:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	f140 809f 	bpl.w	80029dc <DSP_K_SVPWM+0x230>
 800289e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	f340 8095 	ble.w	80029dc <DSP_K_SVPWM+0x230>
    (f_cos > cos_60) && (f_cos <= cos_0) )
 80028b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	f200 808b 	bhi.w	80029dc <DSP_K_SVPWM+0x230>
 f_sin_0_60 = f_sin;
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos;
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 80028ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028d2:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 80028d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80028de:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80028e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ea:	4ba0      	ldr	r3, [pc, #640]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 80028f8:	4b9c      	ldr	r3, [pc, #624]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 800290a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800290e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002912:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002916:	edd7 7a08 	vldr	s15, [r7, #32]
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002926:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 800292a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800292e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	ed97 7a07 	vldr	s14, [r7, #28]
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002942:	ed97 7a08 	vldr	s14, [r7, #32]
 8002946:	edd7 7a07 	vldr	s15, [r7, #28]
 800294a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294e:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002952:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002956:	edd7 7a07 	vldr	s15, [r7, #28]
 800295a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295e:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800296e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002976:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002b70 <DSP_K_SVPWM+0x3c4>
 800297a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800297e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002982:	ee17 2a90 	vmov	r2, s15
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t2+0);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002996:	edd7 7a05 	vldr	s15, [r7, #20]
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002b70 <DSP_K_SVPWM+0x3c4>
 80029a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029aa:	ee17 2a90 	vmov	r2, s15
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029be:	edd7 7a07 	vldr	s15, [r7, #28]
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002b70 <DSP_K_SVPWM+0x3c4>
 80029ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d2:	ee17 2a90 	vmov	r2, s15
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80029da:	e3fb      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
  else if((f_sin >= sin_60)   &&\
 80029dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029e0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 80029e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ec:	f2c0 80c4 	blt.w	8002b78 <DSP_K_SVPWM+0x3cc>
 80029f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029f4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80029f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a00:	f340 80ba 	ble.w	8002b78 <DSP_K_SVPWM+0x3cc>
    (f_cos > cos_120) && (f_cos <= cos_60) )
 8002a04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	f200 80b0 	bhi.w	8002b78 <DSP_K_SVPWM+0x3cc>
 f_sin_0_60 = f_sin * cos_60 - sin_60 * f_cos;
 8002a18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a24:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a28:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002a2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_60 + f_sin * sin_60;
 8002a38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a48:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002a4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a54:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002a58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a5c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a68:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002a6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002a82:	4b3a      	ldr	r3, [pc, #232]	; (8002b6c <DSP_K_SVPWM+0x3c0>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a90:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002ab4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ab8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac8:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002acc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ad0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002adc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ae0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae8:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t3+0);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002af8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b00:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002b70 <DSP_K_SVPWM+0x3c4>
 8002b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b0c:	ee17 2a90 	vmov	r2, s15
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b20:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b28:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b70 <DSP_K_SVPWM+0x3c4>
 8002b2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b34:	ee17 2a90 	vmov	r2, s15
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*T0+0);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b70 <DSP_K_SVPWM+0x3c4>
 8002b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5c:	ee17 2a90 	vmov	r2, s15
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b64:	e336      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
 8002b66:	bf00      	nop
 8002b68:	200000a0 	.word	0x200000a0
 8002b6c:	200000a8 	.word	0x200000a8
 8002b70:	00000000 	.word	0x00000000
 8002b74:	3f5db3d7 	.word	0x3f5db3d7
 else if((f_sin > sin_180) && (f_sin <= sin_120)  &&\
 8002b78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	f340 80c5 	ble.w	8002d12 <DSP_K_SVPWM+0x566>
 8002b88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b8c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b98:	f200 80bb 	bhi.w	8002d12 <DSP_K_SVPWM+0x566>
 8002b9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ba0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	f340 80b1 	ble.w	8002d12 <DSP_K_SVPWM+0x566>
    (f_cos > cos_180) && (f_cos <= cos_120) )
 8002bb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002bb4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	f200 80a7 	bhi.w	8002d12 <DSP_K_SVPWM+0x566>
 f_sin_0_60 = f_sin * cos_120 - sin_120 * f_cos;
 8002bc4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bc8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002bcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bd0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002bd4:	ed5f 6a19 	vldr	s13, [pc, #-100]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_120 + f_sin * sin_120;
 8002be4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002be8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bf0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bf4:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002bf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c00:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002c04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c08:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8002b74 <DSP_K_SVPWM+0x3c8>
 8002c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c14:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c20:	4b9f      	ldr	r3, [pc, #636]	; (8002ea0 <DSP_K_SVPWM+0x6f4>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002c2e:	4b9c      	ldr	r3, [pc, #624]	; (8002ea0 <DSP_K_SVPWM+0x6f4>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3c:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5c:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002c60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c64:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c74:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002c78:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002c88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c94:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ca4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cac:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb8:	ee17 2a90 	vmov	r2, s15
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t1+0);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ccc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ce0:	ee17 2a90 	vmov	r2, s15
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t2+0);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfc:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d08:	ee17 2a90 	vmov	r2, s15
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d10:	e260      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
  else if((f_sin > sin_240) && (f_sin <= sin_180)  &&\
 8002d12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d16:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002ea8 <DSP_K_SVPWM+0x6fc>
 8002d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	f340 80c5 	ble.w	8002eb0 <DSP_K_SVPWM+0x704>
 8002d26:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d32:	f200 80bd 	bhi.w	8002eb0 <DSP_K_SVPWM+0x704>
 8002d36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	f2c0 80b3 	blt.w	8002eb0 <DSP_K_SVPWM+0x704>
    (f_cos >= cos_180) && (f_cos < cos_240) )
 8002d4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d4e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	f140 80a9 	bpl.w	8002eb0 <DSP_K_SVPWM+0x704>
 f_sin_0_60 = f_sin * cos_180 - sin_180 * f_cos;
 8002d5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d62:	eeb1 7a67 	vneg.f32	s14, s15
 8002d66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d6a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002d6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_180 + f_sin * sin_180;
 8002d7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d7e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002d82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d86:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002d92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d96:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002eac <DSP_K_SVPWM+0x700>
 8002d9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002da2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dae:	4b3c      	ldr	r3, [pc, #240]	; (8002ea0 <DSP_K_SVPWM+0x6f4>)
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <DSP_K_SVPWM+0x6f4>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dda:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002dee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002df2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8002dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e02:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002e06:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002e16:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e22:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*T0+0);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e46:	ee17 2a90 	vmov	r2, s15
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*t3+0);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e62:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6e:	ee17 2a90 	vmov	r2, s15
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002ea4 <DSP_K_SVPWM+0x6f8>
 8002e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e96:	ee17 2a90 	vmov	r2, s15
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e9e:	e199      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
 8002ea0:	200000a8 	.word	0x200000a8
 8002ea4:	00000000 	.word	0x00000000
 8002ea8:	bf5db3d7 	.word	0xbf5db3d7
 8002eac:	3f5db3d7 	.word	0x3f5db3d7
  else if( (f_sin <=sin_240)  &&\
 8002eb0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002eb4:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002ea8 <DSP_K_SVPWM+0x6fc>
 8002eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	f200 80bb 	bhi.w	800303a <DSP_K_SVPWM+0x88e>
 8002ec4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ec8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	f2c0 80b1 	blt.w	800303a <DSP_K_SVPWM+0x88e>
    (f_cos >= cos_240) && (f_cos < cos_300) )
 8002ed8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002edc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	f140 80a7 	bpl.w	800303a <DSP_K_SVPWM+0x88e>
 f_sin_0_60 = f_sin * cos_240 - sin_240 * f_cos;
 8002eec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ef0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002ef4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ef8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002efc:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 8002eac <DSP_K_SVPWM+0x700>
 8002f00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f08:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_240 + f_sin * sin_240;
 8002f0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002f10:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f1c:	ed5f 6a1e 	vldr	s13, [pc, #-120]	; 8002ea8 <DSP_K_SVPWM+0x6fc>
 8002f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 8002f2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f30:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8002eac <DSP_K_SVPWM+0x700>
 8002f34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f3c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002f40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f48:	4ba4      	ldr	r3, [pc, #656]	; (80031dc <DSP_K_SVPWM+0xa30>)
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 8002f56:	4ba1      	ldr	r3, [pc, #644]	; (80031dc <DSP_K_SVPWM+0xa30>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f64:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8002f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f74:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f84:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8002f88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 8002fa0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fac:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 8002fb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002fb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbc:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t2+0);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80031e0 <DSP_K_SVPWM+0xa34>
 8002fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe0:	ee17 2a90 	vmov	r2, s15
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ff4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffc:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80031e0 <DSP_K_SVPWM+0xa34>
 8003000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003008:	ee17 2a90 	vmov	r2, s15
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t1+0);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800301c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003024:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80031e0 <DSP_K_SVPWM+0xa34>
 8003028:	ee77 7a87 	vadd.f32	s15, s15, s14
 800302c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003030:	ee17 2a90 	vmov	r2, s15
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c
 8003038:	e0cc      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 800303a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800303e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80031e4 <DSP_K_SVPWM+0xa38>
 8003042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	da00      	bge.n	800304e <DSP_K_SVPWM+0x8a2>
 800304c:	e0c2      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 800304e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	d400      	bmi.n	800305e <DSP_K_SVPWM+0x8b2>
 800305c:	e0ba      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
 else if((f_sin >= sin_300) && (f_sin < sin_0)  &&\
 800305e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003062:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306e:	da00      	bge.n	8003072 <DSP_K_SVPWM+0x8c6>
 8003070:	e0b0      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
    (f_cos >= cos_300) && (f_cos < cos_0) )
 8003072:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800307a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	d400      	bmi.n	8003086 <DSP_K_SVPWM+0x8da>
 8003084:	e0a6      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
 f_sin_0_60 = f_sin * cos_300 - sin_300 * f_cos;
 8003086:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800308a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800308e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003092:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003096:	eddf 6a54 	vldr	s13, [pc, #336]	; 80031e8 <DSP_K_SVPWM+0xa3c>
 800309a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 f_cos_0_60 = f_cos * cos_300 + f_sin * sin_300;
 80030a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80030aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030b6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80031e4 <DSP_K_SVPWM+0xa38>
 80030ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 Tb1 = module * (sin_60 * f_cos_0_60 - cos_60 * f_sin_0_60);
 80030c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030ca:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80031e8 <DSP_K_SVPWM+0xa3c>
 80030ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80030d6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80030da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030e2:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <DSP_K_SVPWM+0xa30>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 Tb2 = module * f_sin_0_60;
 80030f0:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <DSP_K_SVPWM+0xa30>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a08 	vstr	s15, [r7, #32]
 T0  = 0.5f*(1.0f-Tb1-Tb2);
 8003102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003106:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800310a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800310e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003116:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800311a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311e:	edc7 7a07 	vstr	s15, [r7, #28]
 t1 = Tb1+Tb2+T0;
 8003122:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003126:	edd7 7a08 	vldr	s15, [r7, #32]
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003136:	edc7 7a06 	vstr	s15, [r7, #24]
 t2 = Tb2+T0;
 800313a:	ed97 7a08 	vldr	s14, [r7, #32]
 800313e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	edc7 7a05 	vstr	s15, [r7, #20]
 t3 = Tb1+T0;
 800314a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800314e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003156:	edc7 7a04 	vstr	s15, [r7, #16]
Tim->CCR1 = (int)(Tim->ARR*t1+0);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003166:	edd7 7a06 	vldr	s15, [r7, #24]
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80031e0 <DSP_K_SVPWM+0xa34>
 8003172:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317a:	ee17 2a90 	vmov	r2, s15
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
Tim->CCR2 = (int)(Tim->ARR*T0+0);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800318e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80031e0 <DSP_K_SVPWM+0xa34>
 800319a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800319e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a2:	ee17 2a90 	vmov	r2, s15
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38
Tim->CCR3 = (int)(Tim->ARR*t3+0);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80031e0 <DSP_K_SVPWM+0xa34>
 80031c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ca:	ee17 2a90 	vmov	r2, s15
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80031d2:	e7ff      	b.n	80031d4 <DSP_K_SVPWM+0xa28>
 80031d4:	bf00      	nop
 80031d6:	3738      	adds	r7, #56	; 0x38
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200000a8 	.word	0x200000a8
 80031e0:	00000000 	.word	0x00000000
 80031e4:	bf5db3d7 	.word	0xbf5db3d7
 80031e8:	3f5db3d7 	.word	0x3f5db3d7

080031ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_Init+0x40>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_Init+0x40>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_Init+0x40>)
 8003202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <HAL_Init+0x40>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003214:	2003      	movs	r0, #3
 8003216:	f000 fd6b 	bl	8003cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321a:	2000      	movs	r0, #0
 800321c:	f000 f808 	bl	8003230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003220:	f7fe fdae 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00

08003230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_InitTick+0x54>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_InitTick+0x58>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003246:	fbb3 f3f1 	udiv	r3, r3, r1
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd91 	bl	8003d76 <HAL_SYSTICK_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00e      	b.n	800327c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d80a      	bhi.n	800327a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003264:	2200      	movs	r2, #0
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f000 fd4b 	bl	8003d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003270:	4a06      	ldr	r2, [pc, #24]	; (800328c <HAL_InitTick+0x5c>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000008 	.word	0x20000008
 8003288:	20000010 	.word	0x20000010
 800328c:	2000000c 	.word	0x2000000c

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000010 	.word	0x20000010
 80032b4:	200003e4 	.word	0x200003e4

080032b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	200003e4 	.word	0x200003e4

080032d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff ffee 	bl	80032b8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d005      	beq.n	80032f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_Delay+0x40>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f6:	bf00      	nop
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d8f7      	bhi.n	80032f8 <HAL_Delay+0x28>
  {
  }
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000010 	.word	0x20000010

08003314 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e033      	b.n	8003392 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe f80c 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800335a:	f023 0302 	bic.w	r3, r3, #2
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f958 	bl	800361c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
 8003382:	e001      	b.n	8003388 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e105      	b.n	8003600 <HAL_ADC_ConfigChannel+0x228>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d925      	bls.n	8003450 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	3b1e      	subs	r3, #30
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	400a      	ands	r2, r1
 8003428:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68d9      	ldr	r1, [r3, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	4618      	mov	r0, r3
 800343c:	4603      	mov	r3, r0
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4403      	add	r3, r0
 8003442:	3b1e      	subs	r3, #30
 8003444:	409a      	lsls	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e022      	b.n	8003496 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6919      	ldr	r1, [r3, #16]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	2207      	movs	r2, #7
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	4603      	mov	r3, r0
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4403      	add	r3, r0
 800348c:	409a      	lsls	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d824      	bhi.n	80034e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b05      	subs	r3, #5
 80034b0:	221f      	movs	r2, #31
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	400a      	ands	r2, r1
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b05      	subs	r3, #5
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34
 80034e6:	e04c      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d824      	bhi.n	800353a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b23      	subs	r3, #35	; 0x23
 8003502:	221f      	movs	r2, #31
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43da      	mvns	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	400a      	ands	r2, r1
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b23      	subs	r3, #35	; 0x23
 800352c:	fa00 f203 	lsl.w	r2, r0, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
 8003538:	e023      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	3b41      	subs	r3, #65	; 0x41
 800354c:	221f      	movs	r2, #31
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	400a      	ands	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b41      	subs	r3, #65	; 0x41
 8003576:	fa00 f203 	lsl.w	r2, r0, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_ADC_ConfigChannel+0x234>)
 8003584:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_ADC_ConfigChannel+0x238>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1cc>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d105      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_ADC_ConfigChannel+0x238>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d123      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d003      	beq.n	80035be <HAL_ADC_ConfigChannel+0x1e6>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b11      	cmp	r3, #17
 80035bc:	d11b      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d111      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_ADC_ConfigChannel+0x23c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_ADC_ConfigChannel+0x240>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	0c9a      	lsrs	r2, r3, #18
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035e8:	e002      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f9      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40012300 	.word	0x40012300
 8003610:	40012000 	.word	0x40012000
 8003614:	20000008 	.word	0x20000008
 8003618:	431bde83 	.word	0x431bde83

0800361c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003624:	4b79      	ldr	r3, [pc, #484]	; (800380c <ADC_Init+0x1f0>)
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	021a      	lsls	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	4a58      	ldr	r2, [pc, #352]	; (8003810 <ADC_Init+0x1f4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e00f      	b.n	800371a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0202 	bic.w	r2, r2, #2
 8003728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e1b      	ldrb	r3, [r3, #24]
 8003734:	005a      	lsls	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	3b01      	subs	r3, #1
 8003774:	035a      	lsls	r2, r3, #13
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	e007      	b.n	8003790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	051a      	lsls	r2, r3, #20
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037d2:	025a      	lsls	r2, r3, #9
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	029a      	lsls	r2, r3, #10
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40012300 	.word	0x40012300
 8003810:	0f000001 	.word	0x0f000001

08003814 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 800382e:	2302      	movs	r3, #2
 8003830:	e09e      	b.n	8003970 <HAL_ADCEx_MultiModeStart_DMA+0x15c>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d018      	beq.n	800387a <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003858:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a47      	ldr	r2, [pc, #284]	; (800397c <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0c9a      	lsrs	r2, r3, #18
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800386c:	e002      	b.n	8003874 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3b01      	subs	r3, #1
 8003872:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f9      	bne.n	800386e <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d172      	bne.n	800396e <HAL_ADCEx_MultiModeStart_DMA+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c6:	d106      	bne.n	80038d6 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f023 0206 	bic.w	r2, r3, #6
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
 80038d4:	e002      	b.n	80038dc <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	4a25      	ldr	r2, [pc, #148]	; (8003980 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 80038ea:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	4a24      	ldr	r2, [pc, #144]	; (8003984 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	4a23      	ldr	r2, [pc, #140]	; (8003988 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 80038fa:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0202 	mvn.w	r2, #2
 8003904:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003914:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_ADCEx_MultiModeStart_DMA+0x178>)
 8003918:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	e005      	b.n	800393e <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3308      	adds	r3, #8
 8003946:	4619      	mov	r1, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f000 fbc8 	bl	80040e0 <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <HAL_ADCEx_MultiModeStart_DMA+0x15a>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800396c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000008 	.word	0x20000008
 800397c:	431bde83 	.word	0x431bde83
 8003980:	08003a1d 	.word	0x08003a1d
 8003984:	08003ac3 	.word	0x08003ac3
 8003988:	08003adf 	.word	0x08003adf
 800398c:	40012300 	.word	0x40012300

08003990 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e031      	b.n	8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 021f 	bic.w	r2, r3, #31
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40012300 	.word	0x40012300

08003a1c <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13c      	bne.n	8003ab0 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d12b      	bne.n	8003aa8 <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d127      	bne.n	8003aa8 <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d119      	bne.n	8003aa8 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0220 	bic.w	r2, r2, #32
 8003a82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7ff fc76 	bl	800339a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003aae:	e004      	b.n	8003aba <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff fc6c 	bl	80033ae <HAL_ADC_ConvHalfCpltCallback>
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f043 0204 	orr.w	r2, r3, #4
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff fc5f 	bl	80033c2 <HAL_ADC_ErrorCallback>
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	60d3      	str	r3, [r2, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <__NVIC_GetPriorityGrouping+0x18>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 0307 	and.w	r3, r3, #7
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db0b      	blt.n	8003b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4907      	ldr	r1, [pc, #28]	; (8003ba8 <__NVIC_EnableIRQ+0x38>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2001      	movs	r0, #1
 8003b92:	fa00 f202 	lsl.w	r2, r0, r2
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	e000e100 	.word	0xe000e100

08003bac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	db10      	blt.n	8003be0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4909      	ldr	r1, [pc, #36]	; (8003bec <__NVIC_DisableIRQ+0x40>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2001      	movs	r0, #1
 8003bce:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd2:	3320      	adds	r3, #32
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bdc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cbc:	d301      	bcc.n	8003cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e00f      	b.n	8003ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <SysTick_Config+0x40>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cca:	210f      	movs	r1, #15
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	f7ff ff8e 	bl	8003bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <SysTick_Config+0x40>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <SysTick_Config+0x40>)
 8003cdc:	2207      	movs	r2, #7
 8003cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	e000e010 	.word	0xe000e010

08003cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff07 	bl	8003b0c <__NVIC_SetPriorityGrouping>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d18:	f7ff ff1c 	bl	8003b54 <__NVIC_GetPriorityGrouping>
 8003d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	6978      	ldr	r0, [r7, #20]
 8003d24:	f7ff ff8e 	bl	8003c44 <NVIC_EncodePriority>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff5d 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003d36:	bf00      	nop
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	4603      	mov	r3, r0
 8003d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff0f 	bl	8003b70 <__NVIC_EnableIRQ>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff1f 	bl	8003bac <__NVIC_DisableIRQ>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff94 	bl	8003cac <SysTick_Config>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e014      	b.n	8003dca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	791b      	ldrb	r3, [r3, #4]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fd fbdb 	bl	800156c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	2300      	movs	r3, #0
 8003de2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	795b      	ldrb	r3, [r3, #5]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_DAC_Start+0x1e>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e050      	b.n	8003e92 <HAL_DAC_Start+0xc0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	2201      	movs	r2, #1
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	409a      	lsls	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11a      	bne.n	8003e4c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e2c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d127      	bne.n	8003e84 <HAL_DAC_Start+0xb2>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b38      	cmp	r3, #56	; 0x38
 8003e38:	d124      	bne.n	8003e84 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	e01b      	b.n	8003e84 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003e62:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e6a:	d10b      	bne.n	8003e84 <HAL_DAC_Start+0xb2>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003e72:	d107      	bne.n	8003e84 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0202 	orr.w	r2, r2, #2
 8003e82:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b087      	sub	sp, #28
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	795b      	ldrb	r3, [r3, #5]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_DAC_ConfigChannel+0x20>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e036      	b.n	8003f2c <HAL_DAC_ConfigChannel+0x8e>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ed2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	22c0      	movs	r2, #192	; 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e004      	b.n	8003f6c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	3314      	adds	r3, #20
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff f992 	bl	80032b8 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e099      	b.n	80040d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc0:	e00f      	b.n	8003fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc2:	f7ff f979 	bl	80032b8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d908      	bls.n	8003fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2203      	movs	r2, #3
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e078      	b.n	80040d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e8      	bne.n	8003fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_DMA_Init+0x158>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b04      	cmp	r3, #4
 800403a:	d107      	bne.n	800404c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	4313      	orrs	r3, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b04      	cmp	r3, #4
 8004074:	d117      	bne.n	80040a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fa6f 	bl	800456c <DMA_CheckFifoParam>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040a2:	2301      	movs	r3, #1
 80040a4:	e016      	b.n	80040d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa26 	bl	8004500 <DMA_CalcBaseAndBitshift>
 80040b4:	4603      	mov	r3, r0
 80040b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	223f      	movs	r2, #63	; 0x3f
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	f010803f 	.word	0xf010803f

080040e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_DMA_Start_IT+0x26>
 8004102:	2302      	movs	r3, #2
 8004104:	e040      	b.n	8004188 <HAL_DMA_Start_IT+0xa8>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d12f      	bne.n	800417a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f9b8 	bl	80044a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	223f      	movs	r2, #63	; 0x3f
 800413a:	409a      	lsls	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0216 	orr.w	r2, r2, #22
 800414e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e005      	b.n	8004186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004186:	7dfb      	ldrb	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800419c:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <HAL_DMA_IRQHandler+0x258>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a92      	ldr	r2, [pc, #584]	; (80043ec <HAL_DMA_IRQHandler+0x25c>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0a9b      	lsrs	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	2208      	movs	r2, #8
 80041bc:	409a      	lsls	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01a      	beq.n	80041fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	2208      	movs	r2, #8
 80041ea:	409a      	lsls	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d012      	beq.n	8004232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	2201      	movs	r2, #1
 8004220:	409a      	lsls	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f043 0202 	orr.w	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2204      	movs	r2, #4
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d012      	beq.n	8004268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	2204      	movs	r2, #4
 8004256:	409a      	lsls	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	2210      	movs	r2, #16
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d043      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03c      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	2210      	movs	r2, #16
 800428c:	409a      	lsls	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d018      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d024      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
 80042be:	e01f      	b.n	8004300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01b      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
 80042d0:	e016      	b.n	8004300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0208 	bic.w	r2, r2, #8
 80042ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	2220      	movs	r2, #32
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 808e 	beq.w	800442e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8086 	beq.w	800442e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	2220      	movs	r2, #32
 8004328:	409a      	lsls	r2, r3
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b05      	cmp	r3, #5
 8004338:	d136      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0216 	bic.w	r2, r2, #22
 8004348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_DMA_IRQHandler+0x1da>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0208 	bic.w	r2, r2, #8
 8004378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	223f      	movs	r2, #63	; 0x3f
 8004380:	409a      	lsls	r2, r3
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439a:	2b00      	cmp	r3, #0
 800439c:	d07d      	beq.n	800449a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
        }
        return;
 80043a6:	e078      	b.n	800449a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01c      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d030      	beq.n	800442e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e02b      	b.n	800442e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d027      	beq.n	800442e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
 80043e6:	e022      	b.n	800442e <HAL_DMA_IRQHandler+0x29e>
 80043e8:	20000008 	.word	0x20000008
 80043ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0210 	bic.w	r2, r2, #16
 800440c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	2b00      	cmp	r3, #0
 8004434:	d032      	beq.n	800449c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d022      	beq.n	8004488 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2205      	movs	r2, #5
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	3301      	adds	r3, #1
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	429a      	cmp	r2, r3
 8004464:	d307      	bcc.n	8004476 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f2      	bne.n	800445a <HAL_DMA_IRQHandler+0x2ca>
 8004474:	e000      	b.n	8004478 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004476:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
 8004498:	e000      	b.n	800449c <HAL_DMA_IRQHandler+0x30c>
        return;
 800449a:	bf00      	nop
    }
  }
}
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop

080044a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d108      	bne.n	80044e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044e2:	e007      	b.n	80044f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	3b10      	subs	r3, #16
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <DMA_CalcBaseAndBitshift+0x64>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800451a:	4a13      	ldr	r2, [pc, #76]	; (8004568 <DMA_CalcBaseAndBitshift+0x68>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d909      	bls.n	8004542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	1d1a      	adds	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	659a      	str	r2, [r3, #88]	; 0x58
 8004540:	e007      	b.n	8004552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	aaaaaaab 	.word	0xaaaaaaab
 8004568:	08007594 	.word	0x08007594

0800456c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11f      	bne.n	80045c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d855      	bhi.n	8004638 <DMA_CheckFifoParam+0xcc>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <DMA_CheckFifoParam+0x28>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045a5 	.word	0x080045a5
 8004598:	080045b7 	.word	0x080045b7
 800459c:	080045a5 	.word	0x080045a5
 80045a0:	08004639 	.word	0x08004639
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d045      	beq.n	800463c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b4:	e042      	b.n	800463c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045be:	d13f      	bne.n	8004640 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c4:	e03c      	b.n	8004640 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ce:	d121      	bne.n	8004614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d836      	bhi.n	8004644 <DMA_CheckFifoParam+0xd8>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <DMA_CheckFifoParam+0x70>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	080045f3 	.word	0x080045f3
 80045e4:	080045ed 	.word	0x080045ed
 80045e8:	08004605 	.word	0x08004605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
      break;
 80045f0:	e02f      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d024      	beq.n	8004648 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004602:	e021      	b.n	8004648 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800460c:	d11e      	bne.n	800464c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004612:	e01b      	b.n	800464c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d902      	bls.n	8004620 <DMA_CheckFifoParam+0xb4>
 800461a:	2b03      	cmp	r3, #3
 800461c:	d003      	beq.n	8004626 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800461e:	e018      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
      break;
 8004624:	e015      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00e      	beq.n	8004650 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      break;
 8004636:	e00b      	b.n	8004650 <DMA_CheckFifoParam+0xe4>
      break;
 8004638:	bf00      	nop
 800463a:	e00a      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      break;
 800463c:	bf00      	nop
 800463e:	e008      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      break;
 8004640:	bf00      	nop
 8004642:	e006      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      break;
 8004644:	bf00      	nop
 8004646:	e004      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      break;
 8004648:	bf00      	nop
 800464a:	e002      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      break;   
 800464c:	bf00      	nop
 800464e:	e000      	b.n	8004652 <DMA_CheckFifoParam+0xe6>
      break;
 8004650:	bf00      	nop
    }
  } 
  
  return status; 
 8004652:	7bfb      	ldrb	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e16b      	b.n	8004954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800467c:	2201      	movs	r2, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	f040 815a 	bne.w	800494e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d00b      	beq.n	80046ba <HAL_GPIO_Init+0x5a>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d007      	beq.n	80046ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046ae:	2b11      	cmp	r3, #17
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b12      	cmp	r3, #18
 80046b8:	d130      	bne.n	800471c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f0:	2201      	movs	r2, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 0201 	and.w	r2, r3, #1
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2203      	movs	r2, #3
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0xfc>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b12      	cmp	r3, #18
 800475a:	d123      	bne.n	80047a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	08da      	lsrs	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3208      	adds	r2, #8
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	220f      	movs	r2, #15
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80b4 	beq.w	800494e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	4b5f      	ldr	r3, [pc, #380]	; (8004968 <HAL_GPIO_Init+0x308>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	4a5e      	ldr	r2, [pc, #376]	; (8004968 <HAL_GPIO_Init+0x308>)
 80047f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f4:	6453      	str	r3, [r2, #68]	; 0x44
 80047f6:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <HAL_GPIO_Init+0x308>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004802:	4a5a      	ldr	r2, [pc, #360]	; (800496c <HAL_GPIO_Init+0x30c>)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	3302      	adds	r3, #2
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	220f      	movs	r2, #15
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43db      	mvns	r3, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a51      	ldr	r2, [pc, #324]	; (8004970 <HAL_GPIO_Init+0x310>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02b      	beq.n	8004886 <HAL_GPIO_Init+0x226>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a50      	ldr	r2, [pc, #320]	; (8004974 <HAL_GPIO_Init+0x314>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d025      	beq.n	8004882 <HAL_GPIO_Init+0x222>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a4f      	ldr	r2, [pc, #316]	; (8004978 <HAL_GPIO_Init+0x318>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01f      	beq.n	800487e <HAL_GPIO_Init+0x21e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4e      	ldr	r2, [pc, #312]	; (800497c <HAL_GPIO_Init+0x31c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d019      	beq.n	800487a <HAL_GPIO_Init+0x21a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4d      	ldr	r2, [pc, #308]	; (8004980 <HAL_GPIO_Init+0x320>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_GPIO_Init+0x216>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4c      	ldr	r2, [pc, #304]	; (8004984 <HAL_GPIO_Init+0x324>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00d      	beq.n	8004872 <HAL_GPIO_Init+0x212>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4b      	ldr	r2, [pc, #300]	; (8004988 <HAL_GPIO_Init+0x328>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <HAL_GPIO_Init+0x20e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4a      	ldr	r2, [pc, #296]	; (800498c <HAL_GPIO_Init+0x32c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_GPIO_Init+0x20a>
 8004866:	2307      	movs	r3, #7
 8004868:	e00e      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800486a:	2308      	movs	r3, #8
 800486c:	e00c      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800486e:	2306      	movs	r3, #6
 8004870:	e00a      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004872:	2305      	movs	r3, #5
 8004874:	e008      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004876:	2304      	movs	r3, #4
 8004878:	e006      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800487a:	2303      	movs	r3, #3
 800487c:	e004      	b.n	8004888 <HAL_GPIO_Init+0x228>
 800487e:	2302      	movs	r3, #2
 8004880:	e002      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <HAL_GPIO_Init+0x228>
 8004886:	2300      	movs	r3, #0
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	f002 0203 	and.w	r2, r2, #3
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	4093      	lsls	r3, r2
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004898:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_GPIO_Init+0x30c>)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	3302      	adds	r3, #2
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048a6:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <HAL_GPIO_Init+0x330>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	43db      	mvns	r3, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4013      	ands	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ca:	4a31      	ldr	r2, [pc, #196]	; (8004990 <HAL_GPIO_Init+0x330>)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048d0:	4b2f      	ldr	r3, [pc, #188]	; (8004990 <HAL_GPIO_Init+0x330>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <HAL_GPIO_Init+0x330>)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_GPIO_Init+0x330>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800491e:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <HAL_GPIO_Init+0x330>)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004924:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <HAL_GPIO_Init+0x330>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004948:	4a11      	ldr	r2, [pc, #68]	; (8004990 <HAL_GPIO_Init+0x330>)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3301      	adds	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	f67f ae90 	bls.w	800467c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800495c:	bf00      	nop
 800495e:	3724      	adds	r7, #36	; 0x24
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40023800 	.word	0x40023800
 800496c:	40013800 	.word	0x40013800
 8004970:	40020000 	.word	0x40020000
 8004974:	40020400 	.word	0x40020400
 8004978:	40020800 	.word	0x40020800
 800497c:	40020c00 	.word	0x40020c00
 8004980:	40021000 	.word	0x40021000
 8004984:	40021400 	.word	0x40021400
 8004988:	40021800 	.word	0x40021800
 800498c:	40021c00 	.word	0x40021c00
 8004990:	40013c00 	.word	0x40013c00

08004994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e001      	b.n	80049b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
 80049d0:	4613      	mov	r3, r2
 80049d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d4:	787b      	ldrb	r3, [r7, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049e0:	e003      	b.n	80049ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049e2:	887b      	ldrh	r3, [r7, #2]
 80049e4:	041a      	lsls	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e25b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d075      	beq.n	8004b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a16:	4ba3      	ldr	r3, [pc, #652]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00c      	beq.n	8004a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4ba0      	ldr	r3, [pc, #640]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d112      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4b9d      	ldr	r3, [pc, #628]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	4b99      	ldr	r3, [pc, #612]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05b      	beq.n	8004b00 <HAL_RCC_OscConfig+0x108>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d157      	bne.n	8004b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e236      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCC_OscConfig+0x74>
 8004a5e:	4b91      	ldr	r3, [pc, #580]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a90      	ldr	r2, [pc, #576]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x98>
 8004a76:	4b8b      	ldr	r3, [pc, #556]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a8a      	ldr	r2, [pc, #552]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a87      	ldr	r2, [pc, #540]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a90:	4b84      	ldr	r3, [pc, #528]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a83      	ldr	r2, [pc, #524]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b81      	ldr	r3, [pc, #516]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a80      	ldr	r2, [pc, #512]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fe fc02 	bl	80032b8 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fe fbfe 	bl	80032b8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e1fb      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	4b76      	ldr	r3, [pc, #472]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xc0>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fe fbee 	bl	80032b8 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fe fbea 	bl	80032b8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1e7      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	4b6c      	ldr	r3, [pc, #432]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xe8>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d063      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b62      	ldr	r3, [pc, #392]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d11c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b26:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d116      	bne.n	8004b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b32:	4b5c      	ldr	r3, [pc, #368]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_RCC_OscConfig+0x152>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e1bb      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4a:	4b56      	ldr	r3, [pc, #344]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4952      	ldr	r1, [pc, #328]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	e03a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d020      	beq.n	8004baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b68:	4b4f      	ldr	r3, [pc, #316]	; (8004ca8 <HAL_RCC_OscConfig+0x2b0>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fe fba3 	bl	80032b8 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fe fb9f 	bl	80032b8 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e19c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b88:	4b46      	ldr	r3, [pc, #280]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b94:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4940      	ldr	r1, [pc, #256]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004baa:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <HAL_RCC_OscConfig+0x2b0>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fe fb82 	bl	80032b8 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7fe fb7e 	bl	80032b8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e17b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d030      	beq.n	8004c44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bea:	4b30      	ldr	r3, [pc, #192]	; (8004cac <HAL_RCC_OscConfig+0x2b4>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fe fb62 	bl	80032b8 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7fe fb5e 	bl	80032b8 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e15b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x200>
 8004c16:	e015      	b.n	8004c44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c18:	4b24      	ldr	r3, [pc, #144]	; (8004cac <HAL_RCC_OscConfig+0x2b4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe fb4b 	bl	80032b8 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c26:	f7fe fb47 	bl	80032b8 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e144      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a0 	beq.w	8004d92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d121      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fe fb0d 	bl	80032b8 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e011      	b.n	8004cc6 <HAL_RCC_OscConfig+0x2ce>
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	42470000 	.word	0x42470000
 8004cac:	42470e80 	.word	0x42470e80
 8004cb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb4:	f7fe fb00 	bl	80032b8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0fd      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc6:	4b81      	ldr	r3, [pc, #516]	; (8004ecc <HAL_RCC_OscConfig+0x4d4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d106      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2f0>
 8004cda:	4b7d      	ldr	r3, [pc, #500]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a7c      	ldr	r2, [pc, #496]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce6:	e01c      	b.n	8004d22 <HAL_RCC_OscConfig+0x32a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d10c      	bne.n	8004d0a <HAL_RCC_OscConfig+0x312>
 8004cf0:	4b77      	ldr	r3, [pc, #476]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	4a76      	ldr	r2, [pc, #472]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cf6:	f043 0304 	orr.w	r3, r3, #4
 8004cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfc:	4b74      	ldr	r3, [pc, #464]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	4a73      	ldr	r2, [pc, #460]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6713      	str	r3, [r2, #112]	; 0x70
 8004d08:	e00b      	b.n	8004d22 <HAL_RCC_OscConfig+0x32a>
 8004d0a:	4b71      	ldr	r3, [pc, #452]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6713      	str	r3, [r2, #112]	; 0x70
 8004d16:	4b6e      	ldr	r3, [pc, #440]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	4a6d      	ldr	r2, [pc, #436]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2a:	f7fe fac5 	bl	80032b8 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fe fac1 	bl	80032b8 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e0bc      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d48:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ee      	beq.n	8004d32 <HAL_RCC_OscConfig+0x33a>
 8004d54:	e014      	b.n	8004d80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d56:	f7fe faaf 	bl	80032b8 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fe faab 	bl	80032b8 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0a6      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d74:	4b56      	ldr	r3, [pc, #344]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ee      	bne.n	8004d5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a51      	ldr	r2, [pc, #324]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8092 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 030c 	and.w	r3, r3, #12
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d05c      	beq.n	8004e62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d141      	bne.n	8004e34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db0:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <HAL_RCC_OscConfig+0x4dc>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7fe fa7f 	bl	80032b8 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7fe fa7b 	bl	80032b8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e078      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd0:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	019b      	lsls	r3, r3, #6
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	3b01      	subs	r3, #1
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	4933      	ldr	r1, [pc, #204]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e06:	4b33      	ldr	r3, [pc, #204]	; (8004ed4 <HAL_RCC_OscConfig+0x4dc>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fa54 	bl	80032b8 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe fa50 	bl	80032b8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e04d      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x41c>
 8004e32:	e045      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e34:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_RCC_OscConfig+0x4dc>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fe fa3d 	bl	80032b8 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fe fa39 	bl	80032b8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e036      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e54:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCC_OscConfig+0x44a>
 8004e60:	e02e      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e029      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d11c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d115      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	42470060 	.word	0x42470060

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0cc      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d90c      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b63      	ldr	r3, [pc, #396]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0b8      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d020      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f2c:	4b59      	ldr	r3, [pc, #356]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a58      	ldr	r2, [pc, #352]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a52      	ldr	r2, [pc, #328]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f50:	4b50      	ldr	r3, [pc, #320]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	494d      	ldr	r1, [pc, #308]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d044      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	4b47      	ldr	r3, [pc, #284]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d119      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa6:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e067      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb6:	4b37      	ldr	r3, [pc, #220]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4934      	ldr	r1, [pc, #208]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fe f976 	bl	80032b8 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f7fe f972 	bl	80032b8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 020c 	and.w	r2, r3, #12
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1eb      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d20c      	bcs.n	8005020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e032      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4916      	ldr	r1, [pc, #88]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	490e      	ldr	r1, [pc, #56]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800505e:	f000 f821 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8005062:	4601      	mov	r1, r0
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	5cd3      	ldrb	r3, [r2, r3]
 8005072:	fa21 f303 	lsr.w	r3, r1, r3
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe f8d6 	bl	8003230 <HAL_InitTick>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023c00 	.word	0x40023c00
 8005094:	40023800 	.word	0x40023800
 8005098:	08007584 	.word	0x08007584
 800509c:	20000008 	.word	0x20000008
 80050a0:	2000000c 	.word	0x2000000c

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	2300      	movs	r3, #0
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050ba:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d007      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x32>
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d008      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x38>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 80b4 	bne.w	8005238 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b5e      	ldr	r3, [pc, #376]	; (800524c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050d2:	60bb      	str	r3, [r7, #8]
       break;
 80050d4:	e0b3      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d6:	4b5e      	ldr	r3, [pc, #376]	; (8005250 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80050d8:	60bb      	str	r3, [r7, #8]
      break;
 80050da:	e0b0      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050dc:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e6:	4b58      	ldr	r3, [pc, #352]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d04a      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f2:	4b55      	ldr	r3, [pc, #340]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	f04f 0400 	mov.w	r4, #0
 80050fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	ea03 0501 	and.w	r5, r3, r1
 8005108:	ea04 0602 	and.w	r6, r4, r2
 800510c:	4629      	mov	r1, r5
 800510e:	4632      	mov	r2, r6
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	f04f 0400 	mov.w	r4, #0
 8005118:	0154      	lsls	r4, r2, #5
 800511a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800511e:	014b      	lsls	r3, r1, #5
 8005120:	4619      	mov	r1, r3
 8005122:	4622      	mov	r2, r4
 8005124:	1b49      	subs	r1, r1, r5
 8005126:	eb62 0206 	sbc.w	r2, r2, r6
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	f04f 0400 	mov.w	r4, #0
 8005132:	0194      	lsls	r4, r2, #6
 8005134:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005138:	018b      	lsls	r3, r1, #6
 800513a:	1a5b      	subs	r3, r3, r1
 800513c:	eb64 0402 	sbc.w	r4, r4, r2
 8005140:	f04f 0100 	mov.w	r1, #0
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	00e2      	lsls	r2, r4, #3
 800514a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800514e:	00d9      	lsls	r1, r3, #3
 8005150:	460b      	mov	r3, r1
 8005152:	4614      	mov	r4, r2
 8005154:	195b      	adds	r3, r3, r5
 8005156:	eb44 0406 	adc.w	r4, r4, r6
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	0262      	lsls	r2, r4, #9
 8005164:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005168:	0259      	lsls	r1, r3, #9
 800516a:	460b      	mov	r3, r1
 800516c:	4614      	mov	r4, r2
 800516e:	4618      	mov	r0, r3
 8005170:	4621      	mov	r1, r4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f04f 0400 	mov.w	r4, #0
 8005178:	461a      	mov	r2, r3
 800517a:	4623      	mov	r3, r4
 800517c:	f7fb fc42 	bl	8000a04 <__aeabi_uldivmod>
 8005180:	4603      	mov	r3, r0
 8005182:	460c      	mov	r4, r1
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e049      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005188:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	099b      	lsrs	r3, r3, #6
 800518e:	f04f 0400 	mov.w	r4, #0
 8005192:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	ea03 0501 	and.w	r5, r3, r1
 800519e:	ea04 0602 	and.w	r6, r4, r2
 80051a2:	4629      	mov	r1, r5
 80051a4:	4632      	mov	r2, r6
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	f04f 0400 	mov.w	r4, #0
 80051ae:	0154      	lsls	r4, r2, #5
 80051b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051b4:	014b      	lsls	r3, r1, #5
 80051b6:	4619      	mov	r1, r3
 80051b8:	4622      	mov	r2, r4
 80051ba:	1b49      	subs	r1, r1, r5
 80051bc:	eb62 0206 	sbc.w	r2, r2, r6
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	0194      	lsls	r4, r2, #6
 80051ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051ce:	018b      	lsls	r3, r1, #6
 80051d0:	1a5b      	subs	r3, r3, r1
 80051d2:	eb64 0402 	sbc.w	r4, r4, r2
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	00e2      	lsls	r2, r4, #3
 80051e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051e4:	00d9      	lsls	r1, r3, #3
 80051e6:	460b      	mov	r3, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	195b      	adds	r3, r3, r5
 80051ec:	eb44 0406 	adc.w	r4, r4, r6
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	02a2      	lsls	r2, r4, #10
 80051fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051fe:	0299      	lsls	r1, r3, #10
 8005200:	460b      	mov	r3, r1
 8005202:	4614      	mov	r4, r2
 8005204:	4618      	mov	r0, r3
 8005206:	4621      	mov	r1, r4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	461a      	mov	r2, r3
 8005210:	4623      	mov	r3, r4
 8005212:	f7fb fbf7 	bl	8000a04 <__aeabi_uldivmod>
 8005216:	4603      	mov	r3, r0
 8005218:	460c      	mov	r4, r1
 800521a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	60bb      	str	r3, [r7, #8]
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800523a:	60bb      	str	r3, [r7, #8]
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	68bb      	ldr	r3, [r7, #8]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	00f42400 	.word	0x00f42400
 8005250:	007a1200 	.word	0x007a1200

08005254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e056      	b.n	8005314 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fc fccb 	bl	8001c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	ea42 0103 	orr.w	r1, r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	f003 0104 	and.w	r1, r3, #4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d110      	bne.n	8005358 <HAL_SPI_Receive_DMA+0x3c>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533e:	d10b      	bne.n	8005358 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2204      	movs	r2, #4
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8a4 	bl	800549c <HAL_SPI_TransmitReceive_DMA>
 8005354:	4603      	mov	r3, r0
 8005356:	e097      	b.n	8005488 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_SPI_Receive_DMA+0x4a>
 8005362:	2302      	movs	r3, #2
 8005364:	e090      	b.n	8005488 <HAL_SPI_Receive_DMA+0x16c>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800537a:	2302      	movs	r3, #2
 800537c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800537e:	e07e      	b.n	800547e <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_SPI_Receive_DMA+0x70>
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005390:	e075      	b.n	800547e <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2204      	movs	r2, #4
 8005396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d2:	d107      	bne.n	80053e4 <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	4a29      	ldr	r2, [pc, #164]	; (8005490 <HAL_SPI_Receive_DMA+0x174>)
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <HAL_SPI_Receive_DMA+0x178>)
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f8:	4a27      	ldr	r2, [pc, #156]	; (8005498 <HAL_SPI_Receive_DMA+0x17c>)
 80053fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005400:	2200      	movs	r2, #0
 8005402:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	4619      	mov	r1, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800541c:	f7fe fe60 	bl	80040e0 <HAL_DMA_Start_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f043 0210 	orr.w	r2, r3, #16
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800543e:	e01e      	b.n	800547e <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d007      	beq.n	800545e <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0220 	orr.w	r2, r2, #32
 800546c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	0800583d 	.word	0x0800583d
 8005494:	08005705 	.word	0x08005705
 8005498:	08005875 	.word	0x08005875

0800549c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_SPI_TransmitReceive_DMA+0x20>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0e3      	b.n	8005684 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80054d2:	7dbb      	ldrb	r3, [r7, #22]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d00d      	beq.n	80054f4 <HAL_SPI_TransmitReceive_DMA+0x58>
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054de:	d106      	bne.n	80054ee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_SPI_TransmitReceive_DMA+0x52>
 80054e8:	7dbb      	ldrb	r3, [r7, #22]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054f2:	e0c2      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005500:	887b      	ldrh	r3, [r7, #2]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
    goto error;
 800550a:	e0b6      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b04      	cmp	r3, #4
 8005516:	d003      	beq.n	8005520 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2205      	movs	r2, #5
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	887a      	ldrh	r2, [r7, #2]
 8005530:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	887a      	ldrh	r2, [r7, #2]
 8005536:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	887a      	ldrh	r2, [r7, #2]
 8005542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	887a      	ldrh	r2, [r7, #2]
 8005548:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b04      	cmp	r3, #4
 8005560:	d108      	bne.n	8005574 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	4a49      	ldr	r2, [pc, #292]	; (800568c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556e:	4a48      	ldr	r2, [pc, #288]	; (8005690 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c
 8005572:	e007      	b.n	8005584 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005578:	4a46      	ldr	r2, [pc, #280]	; (8005694 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	4a45      	ldr	r2, [pc, #276]	; (8005698 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005582:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	4a44      	ldr	r2, [pc, #272]	; (800569c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005590:	2200      	movs	r2, #0
 8005592:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	4619      	mov	r1, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055ac:	f7fe fd98 	bl	80040e0 <HAL_DMA_Start_IT>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f043 0210 	orr.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80055ce:	e054      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e4:	2200      	movs	r2, #0
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ec:	2200      	movs	r2, #0
 80055ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f4:	2200      	movs	r2, #0
 80055f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	2200      	movs	r2, #0
 80055fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	4619      	mov	r1, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005616:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005618:	f7fe fd62 	bl	80040e0 <HAL_DMA_Start_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00c      	beq.n	800563c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800563a:	e01e      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d007      	beq.n	800565a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005658:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0220 	orr.w	r2, r2, #32
 8005668:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0202 	orr.w	r2, r2, #2
 8005678:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005682:	7dfb      	ldrb	r3, [r7, #23]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0800583d 	.word	0x0800583d
 8005690:	08005705 	.word	0x08005705
 8005694:	08005859 	.word	0x08005859
 8005698:	080057ad 	.word	0x080057ad
 800569c:	08005875 	.word	0x08005875

080056a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005712:	f7fd fdd1 	bl	80032b8 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d03b      	beq.n	80057a0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0220 	bic.w	r2, r2, #32
 8005736:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10d      	bne.n	800575c <SPI_DMAReceiveCplt+0x58>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005748:	d108      	bne.n	800575c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0203 	bic.w	r2, r2, #3
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e007      	b.n	800576c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	2164      	movs	r1, #100	; 0x64
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f909 	bl	8005988 <SPI_EndRxTransaction>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff ffa9 	bl	80056f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800579e:	e002      	b.n	80057a6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff ff7d 	bl	80056a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ba:	f7fd fd7d 	bl	80032b8 <HAL_GetTick>
 80057be:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d02f      	beq.n	8005830 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0220 	bic.w	r2, r2, #32
 80057de:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	2164      	movs	r1, #100	; 0x64
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f935 	bl	8005a54 <SPI_EndRxTxTransaction>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0203 	bic.w	r2, r2, #3
 800580a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff ff61 	bl	80056f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800582e:	e002      	b.n	8005836 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ff3f 	bl	80056b4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff ff3c 	bl	80056c8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff ff38 	bl	80056dc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0203 	bic.w	r2, r2, #3
 8005890:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	f043 0210 	orr.w	r2, r3, #16
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ff22 	bl	80056f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c4:	e04c      	b.n	8005960 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d048      	beq.n	8005960 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058ce:	f7fd fcf3 	bl	80032b8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d902      	bls.n	80058e4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d13d      	bne.n	8005960 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fc:	d111      	bne.n	8005922 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005906:	d004      	beq.n	8005912 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d107      	bne.n	8005922 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005920:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592a:	d10f      	bne.n	800594c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800594a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e00f      	b.n	8005980 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	429a      	cmp	r2, r3
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	429a      	cmp	r2, r3
 800597c:	d1a3      	bne.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800599c:	d111      	bne.n	80059c2 <SPI_EndRxTransaction+0x3a>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a6:	d004      	beq.n	80059b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b0:	d107      	bne.n	80059c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ca:	d12a      	bne.n	8005a22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d4:	d012      	beq.n	80059fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff ff67 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02d      	beq.n	8005a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e026      	b.n	8005a4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	2101      	movs	r1, #1
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff ff54 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01a      	beq.n	8005a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e013      	b.n	8005a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff ff41 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e000      	b.n	8005a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <SPI_EndRxTxTransaction+0x7c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <SPI_EndRxTxTransaction+0x80>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0d5b      	lsrs	r3, r3, #21
 8005a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7e:	d112      	bne.n	8005aa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff ff12 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e00f      	b.n	8005ac6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d0f2      	beq.n	8005aa6 <SPI_EndRxTxTransaction+0x52>
 8005ac0:	e000      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ac2:	bf00      	nop
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000008 	.word	0x20000008
 8005ad4:	165e9f81 	.word	0x165e9f81

08005ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e01d      	b.n	8005b26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fc fc7a 	bl	80023f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f000 fc26 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b06      	cmp	r3, #6
 8005b56:	d007      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e01d      	b.n	8005bc4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f815 	bl	8005bcc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 fbd7 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 ff28 	bl	8006a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a15      	ldr	r2, [pc, #84]	; (8005c54 <HAL_TIM_OC_Start+0x74>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_TIM_OC_Start+0x2c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <HAL_TIM_OC_Start+0x78>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d101      	bne.n	8005c10 <HAL_TIM_OC_Start+0x30>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <HAL_TIM_OC_Start+0x32>
 8005c10:	2300      	movs	r3, #0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b06      	cmp	r3, #6
 8005c36:	d007      	beq.n	8005c48 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40010400 	.word	0x40010400

08005c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e01d      	b.n	8005caa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fc fb90 	bl	80023a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f000 fb64 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d122      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f06f 0202 	mvn.w	r2, #2
 8005cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb18 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 8005cfa:	e005      	b.n	8005d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fb0a 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fb1b 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d122      	bne.n	8005d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d11b      	bne.n	8005d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0204 	mvn.w	r2, #4
 8005d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 faee 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fae0 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 faf1 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d122      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d11b      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0208 	mvn.w	r2, #8
 8005d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fac4 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 8005da2:	e005      	b.n	8005db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fab6 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fac7 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d122      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d11b      	bne.n	8005e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0210 	mvn.w	r2, #16
 8005dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2208      	movs	r2, #8
 8005de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa9a 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 8005df6:	e005      	b.n	8005e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fa8c 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa9d 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d10e      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f06f 0201 	mvn.w	r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fa66 	bl	8006302 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d10e      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d107      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fef1 	bl	8006c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d10e      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fa62 	bl	8006352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d10e      	bne.n	8005eba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0220 	mvn.w	r2, #32
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 febb 	bl	8006c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_OC_ConfigChannel+0x1a>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e04e      	b.n	8005f7c <HAL_TIM_OC_ConfigChannel+0xb8>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b0c      	cmp	r3, #12
 8005ef2:	d839      	bhi.n	8005f68 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <HAL_TIM_OC_ConfigChannel+0x38>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f31 	.word	0x08005f31
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005f69 	.word	0x08005f69
 8005f08:	08005f69 	.word	0x08005f69
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f69 	.word	0x08005f69
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005f69 	.word	0x08005f69
 8005f1c:	08005f4d 	.word	0x08005f4d
 8005f20:	08005f69 	.word	0x08005f69
 8005f24:	08005f69 	.word	0x08005f69
 8005f28:	08005f69 	.word	0x08005f69
 8005f2c:	08005f5b 	.word	0x08005f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fab6 	bl	80064a8 <TIM_OC1_SetConfig>
      break;
 8005f3c:	e015      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fb1f 	bl	8006588 <TIM_OC2_SetConfig>
      break;
 8005f4a:	e00e      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fb8e 	bl	8006674 <TIM_OC3_SetConfig>
      break;
 8005f58:	e007      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fbfb 	bl	800675c <TIM_OC4_SetConfig>
      break;
 8005f66:	e000      	b.n	8005f6a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005f68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e0b4      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b0c      	cmp	r3, #12
 8005fb2:	f200 809f 	bhi.w	80060f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005ff1 	.word	0x08005ff1
 8005fc0:	080060f5 	.word	0x080060f5
 8005fc4:	080060f5 	.word	0x080060f5
 8005fc8:	080060f5 	.word	0x080060f5
 8005fcc:	08006031 	.word	0x08006031
 8005fd0:	080060f5 	.word	0x080060f5
 8005fd4:	080060f5 	.word	0x080060f5
 8005fd8:	080060f5 	.word	0x080060f5
 8005fdc:	08006073 	.word	0x08006073
 8005fe0:	080060f5 	.word	0x080060f5
 8005fe4:	080060f5 	.word	0x080060f5
 8005fe8:	080060f5 	.word	0x080060f5
 8005fec:	080060b3 	.word	0x080060b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fa56 	bl	80064a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0208 	orr.w	r2, r2, #8
 800600a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0204 	bic.w	r2, r2, #4
 800601a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6999      	ldr	r1, [r3, #24]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	619a      	str	r2, [r3, #24]
      break;
 800602e:	e062      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 faa6 	bl	8006588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6999      	ldr	r1, [r3, #24]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	619a      	str	r2, [r3, #24]
      break;
 8006070:	e041      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fafb 	bl	8006674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0208 	orr.w	r2, r2, #8
 800608c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0204 	bic.w	r2, r2, #4
 800609c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69d9      	ldr	r1, [r3, #28]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	61da      	str	r2, [r3, #28]
      break;
 80060b0:	e021      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fb4f 	bl	800675c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69d9      	ldr	r1, [r3, #28]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	021a      	lsls	r2, r3, #8
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	61da      	str	r2, [r3, #28]
      break;
 80060f2:	e000      	b.n	80060f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80060f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIM_ConfigClockSource+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e0a6      	b.n	8006276 <HAL_TIM_ConfigClockSource+0x166>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d067      	beq.n	8006230 <HAL_TIM_ConfigClockSource+0x120>
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d80b      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x6c>
 8006164:	2b10      	cmp	r3, #16
 8006166:	d073      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
 8006168:	2b10      	cmp	r3, #16
 800616a:	d802      	bhi.n	8006172 <HAL_TIM_ConfigClockSource+0x62>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d06f      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006170:	e078      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006172:	2b20      	cmp	r3, #32
 8006174:	d06c      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
 8006176:	2b30      	cmp	r3, #48	; 0x30
 8006178:	d06a      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800617a:	e073      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800617c:	2b70      	cmp	r3, #112	; 0x70
 800617e:	d00d      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x8c>
 8006180:	2b70      	cmp	r3, #112	; 0x70
 8006182:	d804      	bhi.n	800618e <HAL_TIM_ConfigClockSource+0x7e>
 8006184:	2b50      	cmp	r3, #80	; 0x50
 8006186:	d033      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0xe0>
 8006188:	2b60      	cmp	r3, #96	; 0x60
 800618a:	d041      	beq.n	8006210 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800618c:	e06a      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	d066      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x152>
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006198:	d017      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800619a:	e063      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6899      	ldr	r1, [r3, #8]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f000 fc2c 	bl	8006a08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e04c      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6899      	ldr	r1, [r3, #8]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f000 fc15 	bl	8006a08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ec:	609a      	str	r2, [r3, #8]
      break;
 80061ee:	e039      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6859      	ldr	r1, [r3, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f000 fb89 	bl	8006914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2150      	movs	r1, #80	; 0x50
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fbe2 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 800620e:	e029      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6859      	ldr	r1, [r3, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	461a      	mov	r2, r3
 800621e:	f000 fba8 	bl	8006972 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2160      	movs	r1, #96	; 0x60
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fbd2 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 800622e:	e019      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	6859      	ldr	r1, [r3, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	461a      	mov	r2, r3
 800623e:	f000 fb69 	bl	8006914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2140      	movs	r1, #64	; 0x40
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fbc2 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 800624e:	e009      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fbb9 	bl	80069d2 <TIM_ITRx_SetConfig>
      break;
 8006260:	e000      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006292:	2302      	movs	r3, #2
 8006294:	e031      	b.n	80062fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 faad 	bl	8006808 <TIM_SlaveTimer_SetConfig>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e018      	b.n	80062fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a40      	ldr	r2, [pc, #256]	; (800647c <TIM_Base_SetConfig+0x114>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d00f      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a3d      	ldr	r2, [pc, #244]	; (8006480 <TIM_Base_SetConfig+0x118>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00b      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3c      	ldr	r2, [pc, #240]	; (8006484 <TIM_Base_SetConfig+0x11c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3b      	ldr	r2, [pc, #236]	; (8006488 <TIM_Base_SetConfig+0x120>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3a      	ldr	r2, [pc, #232]	; (800648c <TIM_Base_SetConfig+0x124>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d108      	bne.n	80063ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a2f      	ldr	r2, [pc, #188]	; (800647c <TIM_Base_SetConfig+0x114>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d02b      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d027      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2c      	ldr	r2, [pc, #176]	; (8006480 <TIM_Base_SetConfig+0x118>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d023      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2b      	ldr	r2, [pc, #172]	; (8006484 <TIM_Base_SetConfig+0x11c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01f      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2a      	ldr	r2, [pc, #168]	; (8006488 <TIM_Base_SetConfig+0x120>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01b      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a29      	ldr	r2, [pc, #164]	; (800648c <TIM_Base_SetConfig+0x124>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d017      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a28      	ldr	r2, [pc, #160]	; (8006490 <TIM_Base_SetConfig+0x128>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a27      	ldr	r2, [pc, #156]	; (8006494 <TIM_Base_SetConfig+0x12c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00f      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a26      	ldr	r2, [pc, #152]	; (8006498 <TIM_Base_SetConfig+0x130>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00b      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a25      	ldr	r2, [pc, #148]	; (800649c <TIM_Base_SetConfig+0x134>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d007      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <TIM_Base_SetConfig+0x138>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <TIM_Base_SetConfig+0x13c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d108      	bne.n	800642c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a0a      	ldr	r2, [pc, #40]	; (800647c <TIM_Base_SetConfig+0x114>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_Base_SetConfig+0xf8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a0c      	ldr	r2, [pc, #48]	; (800648c <TIM_Base_SetConfig+0x124>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d103      	bne.n	8006468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	615a      	str	r2, [r3, #20]
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40010400 	.word	0x40010400
 8006490:	40014000 	.word	0x40014000
 8006494:	40014400 	.word	0x40014400
 8006498:	40014800 	.word	0x40014800
 800649c:	40001800 	.word	0x40001800
 80064a0:	40001c00 	.word	0x40001c00
 80064a4:	40002000 	.word	0x40002000

080064a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0201 	bic.w	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0303 	bic.w	r3, r3, #3
 80064de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f023 0302 	bic.w	r3, r3, #2
 80064f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a20      	ldr	r2, [pc, #128]	; (8006580 <TIM_OC1_SetConfig+0xd8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_OC1_SetConfig+0x64>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <TIM_OC1_SetConfig+0xdc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10c      	bne.n	8006526 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0308 	bic.w	r3, r3, #8
 8006512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 0304 	bic.w	r3, r3, #4
 8006524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a15      	ldr	r2, [pc, #84]	; (8006580 <TIM_OC1_SetConfig+0xd8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_OC1_SetConfig+0x8e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a14      	ldr	r2, [pc, #80]	; (8006584 <TIM_OC1_SetConfig+0xdc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d111      	bne.n	800655a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	40010000 	.word	0x40010000
 8006584:	40010400 	.word	0x40010400

08006588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f023 0210 	bic.w	r2, r3, #16
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0320 	bic.w	r3, r3, #32
 80065d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a22      	ldr	r2, [pc, #136]	; (800666c <TIM_OC2_SetConfig+0xe4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_OC2_SetConfig+0x68>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a21      	ldr	r2, [pc, #132]	; (8006670 <TIM_OC2_SetConfig+0xe8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10d      	bne.n	800660c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a17      	ldr	r2, [pc, #92]	; (800666c <TIM_OC2_SetConfig+0xe4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_OC2_SetConfig+0x94>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a16      	ldr	r2, [pc, #88]	; (8006670 <TIM_OC2_SetConfig+0xe8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d113      	bne.n	8006644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800662a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	621a      	str	r2, [r3, #32]
}
 800665e:	bf00      	nop
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40010000 	.word	0x40010000
 8006670:	40010400 	.word	0x40010400

08006674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a21      	ldr	r2, [pc, #132]	; (8006754 <TIM_OC3_SetConfig+0xe0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_OC3_SetConfig+0x66>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a20      	ldr	r2, [pc, #128]	; (8006758 <TIM_OC3_SetConfig+0xe4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d10d      	bne.n	80066f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a16      	ldr	r2, [pc, #88]	; (8006754 <TIM_OC3_SetConfig+0xe0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d003      	beq.n	8006706 <TIM_OC3_SetConfig+0x92>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a15      	ldr	r2, [pc, #84]	; (8006758 <TIM_OC3_SetConfig+0xe4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d113      	bne.n	800672e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800670c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	621a      	str	r2, [r3, #32]
}
 8006748:	bf00      	nop
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	40010000 	.word	0x40010000
 8006758:	40010400 	.word	0x40010400

0800675c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	031b      	lsls	r3, r3, #12
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a12      	ldr	r2, [pc, #72]	; (8006800 <TIM_OC4_SetConfig+0xa4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC4_SetConfig+0x68>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a11      	ldr	r2, [pc, #68]	; (8006804 <TIM_OC4_SetConfig+0xa8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d109      	bne.n	80067d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	019b      	lsls	r3, r3, #6
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400

08006808 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006820:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b30      	cmp	r3, #48	; 0x30
 800684c:	d05c      	beq.n	8006908 <TIM_SlaveTimer_SetConfig+0x100>
 800684e:	2b30      	cmp	r3, #48	; 0x30
 8006850:	d806      	bhi.n	8006860 <TIM_SlaveTimer_SetConfig+0x58>
 8006852:	2b10      	cmp	r3, #16
 8006854:	d058      	beq.n	8006908 <TIM_SlaveTimer_SetConfig+0x100>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d056      	beq.n	8006908 <TIM_SlaveTimer_SetConfig+0x100>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d054      	beq.n	8006908 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800685e:	e054      	b.n	800690a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006860:	2b50      	cmp	r3, #80	; 0x50
 8006862:	d03d      	beq.n	80068e0 <TIM_SlaveTimer_SetConfig+0xd8>
 8006864:	2b50      	cmp	r3, #80	; 0x50
 8006866:	d802      	bhi.n	800686e <TIM_SlaveTimer_SetConfig+0x66>
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d010      	beq.n	800688e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800686c:	e04d      	b.n	800690a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800686e:	2b60      	cmp	r3, #96	; 0x60
 8006870:	d040      	beq.n	80068f4 <TIM_SlaveTimer_SetConfig+0xec>
 8006872:	2b70      	cmp	r3, #112	; 0x70
 8006874:	d000      	beq.n	8006878 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006876:	e048      	b.n	800690a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68d9      	ldr	r1, [r3, #12]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f000 f8be 	bl	8006a08 <TIM_ETR_SetConfig>
      break;
 800688c:	e03d      	b.n	800690a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b05      	cmp	r3, #5
 8006894:	d101      	bne.n	800689a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e038      	b.n	800690c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068c0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
      break;
 80068de:	e014      	b.n	800690a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6899      	ldr	r1, [r3, #8]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	461a      	mov	r2, r3
 80068ee:	f000 f811 	bl	8006914 <TIM_TI1_ConfigInputStage>
      break;
 80068f2:	e00a      	b.n	800690a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	6899      	ldr	r1, [r3, #8]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	461a      	mov	r2, r3
 8006902:	f000 f836 	bl	8006972 <TIM_TI2_ConfigInputStage>
      break;
 8006906:	e000      	b.n	800690a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006908:	bf00      	nop
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f023 0201 	bic.w	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f023 030a 	bic.w	r3, r3, #10
 8006950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	621a      	str	r2, [r3, #32]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f023 0210 	bic.w	r2, r3, #16
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800699c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	031b      	lsls	r3, r3, #12
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f043 0307 	orr.w	r3, r3, #7
 80069f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	609a      	str	r2, [r3, #8]
}
 80069fc:	bf00      	nop
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	021a      	lsls	r2, r3, #8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	609a      	str	r2, [r3, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e05a      	b.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a21      	ldr	r2, [pc, #132]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d022      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d01d      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d018      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a1b      	ldr	r2, [pc, #108]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1a      	ldr	r2, [pc, #104]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00e      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a15      	ldr	r2, [pc, #84]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d10c      	bne.n	8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40010400 	.word	0x40010400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40001800 	.word	0x40001800

08006b8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e03d      	b.n	8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <__errno>:
 8006c58:	4b01      	ldr	r3, [pc, #4]	; (8006c60 <__errno+0x8>)
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000014 	.word	0x20000014

08006c64 <__libc_init_array>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	4e0d      	ldr	r6, [pc, #52]	; (8006c9c <__libc_init_array+0x38>)
 8006c68:	4c0d      	ldr	r4, [pc, #52]	; (8006ca0 <__libc_init_array+0x3c>)
 8006c6a:	1ba4      	subs	r4, r4, r6
 8006c6c:	10a4      	asrs	r4, r4, #2
 8006c6e:	2500      	movs	r5, #0
 8006c70:	42a5      	cmp	r5, r4
 8006c72:	d109      	bne.n	8006c88 <__libc_init_array+0x24>
 8006c74:	4e0b      	ldr	r6, [pc, #44]	; (8006ca4 <__libc_init_array+0x40>)
 8006c76:	4c0c      	ldr	r4, [pc, #48]	; (8006ca8 <__libc_init_array+0x44>)
 8006c78:	f000 f876 	bl	8006d68 <_init>
 8006c7c:	1ba4      	subs	r4, r4, r6
 8006c7e:	10a4      	asrs	r4, r4, #2
 8006c80:	2500      	movs	r5, #0
 8006c82:	42a5      	cmp	r5, r4
 8006c84:	d105      	bne.n	8006c92 <__libc_init_array+0x2e>
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c8c:	4798      	blx	r3
 8006c8e:	3501      	adds	r5, #1
 8006c90:	e7ee      	b.n	8006c70 <__libc_init_array+0xc>
 8006c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c96:	4798      	blx	r3
 8006c98:	3501      	adds	r5, #1
 8006c9a:	e7f2      	b.n	8006c82 <__libc_init_array+0x1e>
 8006c9c:	080075ac 	.word	0x080075ac
 8006ca0:	080075ac 	.word	0x080075ac
 8006ca4:	080075ac 	.word	0x080075ac
 8006ca8:	080075b0 	.word	0x080075b0

08006cac <memset>:
 8006cac:	4402      	add	r2, r0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d100      	bne.n	8006cb6 <memset+0xa>
 8006cb4:	4770      	bx	lr
 8006cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cba:	e7f9      	b.n	8006cb0 <memset+0x4>

08006cbc <sqrtf>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	ed2d 8b02 	vpush	{d8}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	eeb0 8a40 	vmov.f32	s16, s0
 8006cc8:	f000 f848 	bl	8006d5c <__ieee754_sqrtf>
 8006ccc:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <sqrtf+0x98>)
 8006cce:	f993 4000 	ldrsb.w	r4, [r3]
 8006cd2:	1c63      	adds	r3, r4, #1
 8006cd4:	d02c      	beq.n	8006d30 <sqrtf+0x74>
 8006cd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8006cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cde:	d627      	bvs.n	8006d30 <sqrtf+0x74>
 8006ce0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	d522      	bpl.n	8006d30 <sqrtf+0x74>
 8006cea:	2301      	movs	r3, #1
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <sqrtf+0x9c>)
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	ee18 0a10 	vmov	r0, s16
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9308      	str	r3, [sp, #32]
 8006cfa:	f7f9 fbc9 	bl	8000490 <__aeabi_f2d>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	b9ac      	cbnz	r4, 8006d38 <sqrtf+0x7c>
 8006d0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d10:	4668      	mov	r0, sp
 8006d12:	f000 f826 	bl	8006d62 <matherr>
 8006d16:	b1b8      	cbz	r0, 8006d48 <sqrtf+0x8c>
 8006d18:	9b08      	ldr	r3, [sp, #32]
 8006d1a:	b11b      	cbz	r3, 8006d24 <sqrtf+0x68>
 8006d1c:	f7ff ff9c 	bl	8006c58 <__errno>
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	6003      	str	r3, [r0, #0]
 8006d24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d28:	f7f9 fe1c 	bl	8000964 <__aeabi_d2f>
 8006d2c:	ee00 0a10 	vmov	s0, r0
 8006d30:	b00a      	add	sp, #40	; 0x28
 8006d32:	ecbd 8b02 	vpop	{d8}
 8006d36:	bd10      	pop	{r4, pc}
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	f7f9 fd2a 	bl	8000794 <__aeabi_ddiv>
 8006d40:	2c02      	cmp	r4, #2
 8006d42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d46:	d1e3      	bne.n	8006d10 <sqrtf+0x54>
 8006d48:	f7ff ff86 	bl	8006c58 <__errno>
 8006d4c:	2321      	movs	r3, #33	; 0x21
 8006d4e:	6003      	str	r3, [r0, #0]
 8006d50:	e7e2      	b.n	8006d18 <sqrtf+0x5c>
 8006d52:	bf00      	nop
 8006d54:	20000078 	.word	0x20000078
 8006d58:	0800759c 	.word	0x0800759c

08006d5c <__ieee754_sqrtf>:
 8006d5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006d60:	4770      	bx	lr

08006d62 <matherr>:
 8006d62:	2000      	movs	r0, #0
 8006d64:	4770      	bx	lr
	...

08006d68 <_init>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

08006d74 <_fini>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr
